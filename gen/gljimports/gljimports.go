// GENERATED FILE. DO NOT EDIT.
package gljimports

import (
	bytes "bytes"
	context "context"
	errors "errors"
	flag "flag"
	fmt "fmt"
	io "io"
	io_fs "io/fs"
	io_ioutil "io/ioutil"
	math "math"
	math_big "math/big"
	math_rand "math/rand"
	net_http "net/http"
	os "os"
	os_exec "os/exec"
	os_signal "os/signal"
	regexp "regexp"
	reflect "reflect"
	sort "sort"
	strconv "strconv"
	strings "strings"
	time "time"
	unicode "unicode"
	github_com_glojurelang_glojure_value "github.com/glojurelang/glojure/value"
	github_com_glojurelang_glojure_runtime "github.com/glojurelang/glojure/runtime"
)

func RegisterImports(_register func(string, interface{})) {
	// package bytes
	////////////////////////////////////////
	_register("bytes.Buffer", reflect.TypeOf((*bytes.Buffer)(nil)).Elem())
	_register("bytes.Compare", bytes.Compare)
	_register("bytes.Contains", bytes.Contains)
	_register("bytes.ContainsAny", bytes.ContainsAny)
	_register("bytes.ContainsRune", bytes.ContainsRune)
	_register("bytes.Count", bytes.Count)
	_register("bytes.Cut", bytes.Cut)
	_register("bytes.Equal", bytes.Equal)
	_register("bytes.EqualFold", bytes.EqualFold)
	_register("bytes.ErrTooLarge", bytes.ErrTooLarge)
	_register("bytes.Fields", bytes.Fields)
	_register("bytes.FieldsFunc", bytes.FieldsFunc)
	_register("bytes.HasPrefix", bytes.HasPrefix)
	_register("bytes.HasSuffix", bytes.HasSuffix)
	_register("bytes.Index", bytes.Index)
	_register("bytes.IndexAny", bytes.IndexAny)
	_register("bytes.IndexByte", bytes.IndexByte)
	_register("bytes.IndexFunc", bytes.IndexFunc)
	_register("bytes.IndexRune", bytes.IndexRune)
	_register("bytes.Join", bytes.Join)
	_register("bytes.LastIndex", bytes.LastIndex)
	_register("bytes.LastIndexAny", bytes.LastIndexAny)
	_register("bytes.LastIndexByte", bytes.LastIndexByte)
	_register("bytes.LastIndexFunc", bytes.LastIndexFunc)
	_register("bytes.Map", bytes.Map)
	_register("bytes.MinRead", bytes.MinRead)
	_register("bytes.NewBuffer", bytes.NewBuffer)
	_register("bytes.NewBufferString", bytes.NewBufferString)
	_register("bytes.NewReader", bytes.NewReader)
	_register("bytes.Reader", reflect.TypeOf((*bytes.Reader)(nil)).Elem())
	_register("bytes.Repeat", bytes.Repeat)
	_register("bytes.Replace", bytes.Replace)
	_register("bytes.ReplaceAll", bytes.ReplaceAll)
	_register("bytes.Runes", bytes.Runes)
	_register("bytes.Split", bytes.Split)
	_register("bytes.SplitAfter", bytes.SplitAfter)
	_register("bytes.SplitAfterN", bytes.SplitAfterN)
	_register("bytes.SplitN", bytes.SplitN)
	_register("bytes.Title", bytes.Title)
	_register("bytes.ToLower", bytes.ToLower)
	_register("bytes.ToLowerSpecial", bytes.ToLowerSpecial)
	_register("bytes.ToTitle", bytes.ToTitle)
	_register("bytes.ToTitleSpecial", bytes.ToTitleSpecial)
	_register("bytes.ToUpper", bytes.ToUpper)
	_register("bytes.ToUpperSpecial", bytes.ToUpperSpecial)
	_register("bytes.ToValidUTF8", bytes.ToValidUTF8)
	_register("bytes.Trim", bytes.Trim)
	_register("bytes.TrimFunc", bytes.TrimFunc)
	_register("bytes.TrimLeft", bytes.TrimLeft)
	_register("bytes.TrimLeftFunc", bytes.TrimLeftFunc)
	_register("bytes.TrimPrefix", bytes.TrimPrefix)
	_register("bytes.TrimRight", bytes.TrimRight)
	_register("bytes.TrimRightFunc", bytes.TrimRightFunc)
	_register("bytes.TrimSpace", bytes.TrimSpace)
	_register("bytes.TrimSuffix", bytes.TrimSuffix)

	// package context
	////////////////////////////////////////
	_register("context.Background", context.Background)
	_register("context.CancelFunc", reflect.TypeOf((*context.CancelFunc)(nil)).Elem())
	_register("context.Canceled", context.Canceled)
	_register("context.Context", reflect.TypeOf((*context.Context)(nil)).Elem())
	_register("context.DeadlineExceeded", context.DeadlineExceeded)
	_register("context.TODO", context.TODO)
	_register("context.WithCancel", context.WithCancel)
	_register("context.WithDeadline", context.WithDeadline)
	_register("context.WithTimeout", context.WithTimeout)
	_register("context.WithValue", context.WithValue)

	// package errors
	////////////////////////////////////////
	_register("errors.As", errors.As)
	_register("errors.Is", errors.Is)
	_register("errors.New", errors.New)
	_register("errors.Unwrap", errors.Unwrap)

	// package flag
	////////////////////////////////////////
	_register("flag.Arg", flag.Arg)
	_register("flag.Args", flag.Args)
	_register("flag.Bool", flag.Bool)
	_register("flag.BoolVar", flag.BoolVar)
	_register("flag.CommandLine", flag.CommandLine)
	_register("flag.ContinueOnError", flag.ContinueOnError)
	_register("flag.Duration", flag.Duration)
	_register("flag.DurationVar", flag.DurationVar)
	_register("flag.ErrHelp", flag.ErrHelp)
	_register("flag.ErrorHandling", reflect.TypeOf((*flag.ErrorHandling)(nil)).Elem())
	_register("flag.ExitOnError", flag.ExitOnError)
	_register("flag.Flag", reflect.TypeOf((*flag.Flag)(nil)).Elem())
	_register("flag.FlagSet", reflect.TypeOf((*flag.FlagSet)(nil)).Elem())
	_register("flag.Float64", flag.Float64)
	_register("flag.Float64Var", flag.Float64Var)
	_register("flag.Func", flag.Func)
	_register("flag.Getter", reflect.TypeOf((*flag.Getter)(nil)).Elem())
	_register("flag.Int", flag.Int)
	_register("flag.Int64", flag.Int64)
	_register("flag.Int64Var", flag.Int64Var)
	_register("flag.IntVar", flag.IntVar)
	_register("flag.Lookup", flag.Lookup)
	_register("flag.NArg", flag.NArg)
	_register("flag.NFlag", flag.NFlag)
	_register("flag.NewFlagSet", flag.NewFlagSet)
	_register("flag.PanicOnError", flag.PanicOnError)
	_register("flag.Parse", flag.Parse)
	_register("flag.Parsed", flag.Parsed)
	_register("flag.PrintDefaults", flag.PrintDefaults)
	_register("flag.Set", flag.Set)
	_register("flag.String", flag.String)
	_register("flag.StringVar", flag.StringVar)
	_register("flag.TextVar", flag.TextVar)
	_register("flag.Uint", flag.Uint)
	_register("flag.Uint64", flag.Uint64)
	_register("flag.Uint64Var", flag.Uint64Var)
	_register("flag.UintVar", flag.UintVar)
	_register("flag.UnquoteUsage", flag.UnquoteUsage)
	_register("flag.Usage", flag.Usage)
	_register("flag.Value", reflect.TypeOf((*flag.Value)(nil)).Elem())
	_register("flag.Var", flag.Var)
	_register("flag.Visit", flag.Visit)
	_register("flag.VisitAll", flag.VisitAll)

	// package fmt
	////////////////////////////////////////
	_register("fmt.Append", fmt.Append)
	_register("fmt.Appendf", fmt.Appendf)
	_register("fmt.Appendln", fmt.Appendln)
	_register("fmt.Errorf", fmt.Errorf)
	_register("fmt.Formatter", reflect.TypeOf((*fmt.Formatter)(nil)).Elem())
	_register("fmt.Fprint", fmt.Fprint)
	_register("fmt.Fprintf", fmt.Fprintf)
	_register("fmt.Fprintln", fmt.Fprintln)
	_register("fmt.Fscan", fmt.Fscan)
	_register("fmt.Fscanf", fmt.Fscanf)
	_register("fmt.Fscanln", fmt.Fscanln)
	_register("fmt.GoStringer", reflect.TypeOf((*fmt.GoStringer)(nil)).Elem())
	_register("fmt.Print", fmt.Print)
	_register("fmt.Printf", fmt.Printf)
	_register("fmt.Println", fmt.Println)
	_register("fmt.Scan", fmt.Scan)
	_register("fmt.ScanState", reflect.TypeOf((*fmt.ScanState)(nil)).Elem())
	_register("fmt.Scanf", fmt.Scanf)
	_register("fmt.Scanln", fmt.Scanln)
	_register("fmt.Scanner", reflect.TypeOf((*fmt.Scanner)(nil)).Elem())
	_register("fmt.Sprint", fmt.Sprint)
	_register("fmt.Sprintf", fmt.Sprintf)
	_register("fmt.Sprintln", fmt.Sprintln)
	_register("fmt.Sscan", fmt.Sscan)
	_register("fmt.Sscanf", fmt.Sscanf)
	_register("fmt.Sscanln", fmt.Sscanln)
	_register("fmt.State", reflect.TypeOf((*fmt.State)(nil)).Elem())
	_register("fmt.Stringer", reflect.TypeOf((*fmt.Stringer)(nil)).Elem())

	// package io
	////////////////////////////////////////
	_register("io.ByteReader", reflect.TypeOf((*io.ByteReader)(nil)).Elem())
	_register("io.ByteScanner", reflect.TypeOf((*io.ByteScanner)(nil)).Elem())
	_register("io.ByteWriter", reflect.TypeOf((*io.ByteWriter)(nil)).Elem())
	_register("io.Closer", reflect.TypeOf((*io.Closer)(nil)).Elem())
	_register("io.Copy", io.Copy)
	_register("io.CopyBuffer", io.CopyBuffer)
	_register("io.CopyN", io.CopyN)
	_register("io.Discard", io.Discard)
	_register("io.EOF", io.EOF)
	_register("io.ErrClosedPipe", io.ErrClosedPipe)
	_register("io.ErrNoProgress", io.ErrNoProgress)
	_register("io.ErrShortBuffer", io.ErrShortBuffer)
	_register("io.ErrShortWrite", io.ErrShortWrite)
	_register("io.ErrUnexpectedEOF", io.ErrUnexpectedEOF)
	_register("io.LimitReader", io.LimitReader)
	_register("io.LimitedReader", reflect.TypeOf((*io.LimitedReader)(nil)).Elem())
	_register("io.MultiReader", io.MultiReader)
	_register("io.MultiWriter", io.MultiWriter)
	_register("io.NewSectionReader", io.NewSectionReader)
	_register("io.NopCloser", io.NopCloser)
	_register("io.Pipe", io.Pipe)
	_register("io.PipeReader", reflect.TypeOf((*io.PipeReader)(nil)).Elem())
	_register("io.PipeWriter", reflect.TypeOf((*io.PipeWriter)(nil)).Elem())
	_register("io.ReadAll", io.ReadAll)
	_register("io.ReadAtLeast", io.ReadAtLeast)
	_register("io.ReadCloser", reflect.TypeOf((*io.ReadCloser)(nil)).Elem())
	_register("io.ReadFull", io.ReadFull)
	_register("io.ReadSeekCloser", reflect.TypeOf((*io.ReadSeekCloser)(nil)).Elem())
	_register("io.ReadSeeker", reflect.TypeOf((*io.ReadSeeker)(nil)).Elem())
	_register("io.ReadWriteCloser", reflect.TypeOf((*io.ReadWriteCloser)(nil)).Elem())
	_register("io.ReadWriteSeeker", reflect.TypeOf((*io.ReadWriteSeeker)(nil)).Elem())
	_register("io.ReadWriter", reflect.TypeOf((*io.ReadWriter)(nil)).Elem())
	_register("io.Reader", reflect.TypeOf((*io.Reader)(nil)).Elem())
	_register("io.ReaderAt", reflect.TypeOf((*io.ReaderAt)(nil)).Elem())
	_register("io.ReaderFrom", reflect.TypeOf((*io.ReaderFrom)(nil)).Elem())
	_register("io.RuneReader", reflect.TypeOf((*io.RuneReader)(nil)).Elem())
	_register("io.RuneScanner", reflect.TypeOf((*io.RuneScanner)(nil)).Elem())
	_register("io.SectionReader", reflect.TypeOf((*io.SectionReader)(nil)).Elem())
	_register("io.SeekCurrent", io.SeekCurrent)
	_register("io.SeekEnd", io.SeekEnd)
	_register("io.SeekStart", io.SeekStart)
	_register("io.Seeker", reflect.TypeOf((*io.Seeker)(nil)).Elem())
	_register("io.StringWriter", reflect.TypeOf((*io.StringWriter)(nil)).Elem())
	_register("io.TeeReader", io.TeeReader)
	_register("io.WriteCloser", reflect.TypeOf((*io.WriteCloser)(nil)).Elem())
	_register("io.WriteSeeker", reflect.TypeOf((*io.WriteSeeker)(nil)).Elem())
	_register("io.WriteString", io.WriteString)
	_register("io.Writer", reflect.TypeOf((*io.Writer)(nil)).Elem())
	_register("io.WriterAt", reflect.TypeOf((*io.WriterAt)(nil)).Elem())
	_register("io.WriterTo", reflect.TypeOf((*io.WriterTo)(nil)).Elem())

	// package io/fs
	////////////////////////////////////////
	_register("io/fs.DirEntry", reflect.TypeOf((*io_fs.DirEntry)(nil)).Elem())
	_register("io/fs.ErrClosed", io_fs.ErrClosed)
	_register("io/fs.ErrExist", io_fs.ErrExist)
	_register("io/fs.ErrInvalid", io_fs.ErrInvalid)
	_register("io/fs.ErrNotExist", io_fs.ErrNotExist)
	_register("io/fs.ErrPermission", io_fs.ErrPermission)
	_register("io/fs.FS", reflect.TypeOf((*io_fs.FS)(nil)).Elem())
	_register("io/fs.File", reflect.TypeOf((*io_fs.File)(nil)).Elem())
	_register("io/fs.FileInfo", reflect.TypeOf((*io_fs.FileInfo)(nil)).Elem())
	_register("io/fs.FileInfoToDirEntry", io_fs.FileInfoToDirEntry)
	_register("io/fs.FileMode", reflect.TypeOf((*io_fs.FileMode)(nil)).Elem())
	_register("io/fs.Glob", io_fs.Glob)
	_register("io/fs.GlobFS", reflect.TypeOf((*io_fs.GlobFS)(nil)).Elem())
	_register("io/fs.ModeAppend", io_fs.ModeAppend)
	_register("io/fs.ModeCharDevice", io_fs.ModeCharDevice)
	_register("io/fs.ModeDevice", io_fs.ModeDevice)
	_register("io/fs.ModeDir", io_fs.ModeDir)
	_register("io/fs.ModeExclusive", io_fs.ModeExclusive)
	_register("io/fs.ModeIrregular", io_fs.ModeIrregular)
	_register("io/fs.ModeNamedPipe", io_fs.ModeNamedPipe)
	_register("io/fs.ModePerm", io_fs.ModePerm)
	_register("io/fs.ModeSetgid", io_fs.ModeSetgid)
	_register("io/fs.ModeSetuid", io_fs.ModeSetuid)
	_register("io/fs.ModeSocket", io_fs.ModeSocket)
	_register("io/fs.ModeSticky", io_fs.ModeSticky)
	_register("io/fs.ModeSymlink", io_fs.ModeSymlink)
	_register("io/fs.ModeTemporary", io_fs.ModeTemporary)
	_register("io/fs.ModeType", io_fs.ModeType)
	_register("io/fs.PathError", reflect.TypeOf((*io_fs.PathError)(nil)).Elem())
	_register("io/fs.ReadDir", io_fs.ReadDir)
	_register("io/fs.ReadDirFS", reflect.TypeOf((*io_fs.ReadDirFS)(nil)).Elem())
	_register("io/fs.ReadDirFile", reflect.TypeOf((*io_fs.ReadDirFile)(nil)).Elem())
	_register("io/fs.ReadFile", io_fs.ReadFile)
	_register("io/fs.ReadFileFS", reflect.TypeOf((*io_fs.ReadFileFS)(nil)).Elem())
	_register("io/fs.SkipDir", io_fs.SkipDir)
	_register("io/fs.Stat", io_fs.Stat)
	_register("io/fs.StatFS", reflect.TypeOf((*io_fs.StatFS)(nil)).Elem())
	_register("io/fs.Sub", io_fs.Sub)
	_register("io/fs.SubFS", reflect.TypeOf((*io_fs.SubFS)(nil)).Elem())
	_register("io/fs.ValidPath", io_fs.ValidPath)
	_register("io/fs.WalkDir", io_fs.WalkDir)
	_register("io/fs.WalkDirFunc", reflect.TypeOf((*io_fs.WalkDirFunc)(nil)).Elem())

	// package io/ioutil
	////////////////////////////////////////
	_register("io/ioutil.Discard", io_ioutil.Discard)
	_register("io/ioutil.NopCloser", io_ioutil.NopCloser)
	_register("io/ioutil.ReadAll", io_ioutil.ReadAll)
	_register("io/ioutil.ReadDir", io_ioutil.ReadDir)
	_register("io/ioutil.ReadFile", io_ioutil.ReadFile)
	_register("io/ioutil.TempDir", io_ioutil.TempDir)
	_register("io/ioutil.TempFile", io_ioutil.TempFile)
	_register("io/ioutil.WriteFile", io_ioutil.WriteFile)

	// package math
	////////////////////////////////////////
	_register("math.Abs", math.Abs)
	_register("math.Acos", math.Acos)
	_register("math.Acosh", math.Acosh)
	_register("math.Asin", math.Asin)
	_register("math.Asinh", math.Asinh)
	_register("math.Atan", math.Atan)
	_register("math.Atan2", math.Atan2)
	_register("math.Atanh", math.Atanh)
	_register("math.Cbrt", math.Cbrt)
	_register("math.Ceil", math.Ceil)
	_register("math.Copysign", math.Copysign)
	_register("math.Cos", math.Cos)
	_register("math.Cosh", math.Cosh)
	_register("math.Dim", math.Dim)
	_register("math.E", math.E)
	_register("math.Erf", math.Erf)
	_register("math.Erfc", math.Erfc)
	_register("math.Erfcinv", math.Erfcinv)
	_register("math.Erfinv", math.Erfinv)
	_register("math.Exp", math.Exp)
	_register("math.Exp2", math.Exp2)
	_register("math.Expm1", math.Expm1)
	_register("math.FMA", math.FMA)
	_register("math.Float32bits", math.Float32bits)
	_register("math.Float32frombits", math.Float32frombits)
	_register("math.Float64bits", math.Float64bits)
	_register("math.Float64frombits", math.Float64frombits)
	_register("math.Floor", math.Floor)
	_register("math.Frexp", math.Frexp)
	_register("math.Gamma", math.Gamma)
	_register("math.Hypot", math.Hypot)
	_register("math.Ilogb", math.Ilogb)
	_register("math.Inf", math.Inf)
	_register("math.IsInf", math.IsInf)
	_register("math.IsNaN", math.IsNaN)
	_register("math.J0", math.J0)
	_register("math.J1", math.J1)
	_register("math.Jn", math.Jn)
	_register("math.Ldexp", math.Ldexp)
	_register("math.Lgamma", math.Lgamma)
	_register("math.Ln10", math.Ln10)
	_register("math.Ln2", math.Ln2)
	_register("math.Log", math.Log)
	_register("math.Log10", math.Log10)
	_register("math.Log10E", math.Log10E)
	_register("math.Log1p", math.Log1p)
	_register("math.Log2", math.Log2)
	_register("math.Log2E", math.Log2E)
	_register("math.Logb", math.Logb)
	_register("math.Max", math.Max)
	_register("math.MaxFloat32", math.MaxFloat32)
	_register("math.MaxFloat64", math.MaxFloat64)
	_register("math.MaxInt", math.MaxInt)
	_register("math.MaxInt16", math.MaxInt16)
	_register("math.MaxInt32", math.MaxInt32)
	_register("math.MaxInt64", math.MaxInt64)
	_register("math.MaxInt8", math.MaxInt8)
	_register("math.MaxUint", uint(math.MaxUint))
	_register("math.MaxUint16", math.MaxUint16)
	_register("math.MaxUint32", math.MaxUint32)
	_register("math.MaxUint64", uint64(math.MaxUint64))
	_register("math.MaxUint8", math.MaxUint8)
	_register("math.Min", math.Min)
	_register("math.MinInt", math.MinInt)
	_register("math.MinInt16", math.MinInt16)
	_register("math.MinInt32", math.MinInt32)
	_register("math.MinInt64", math.MinInt64)
	_register("math.MinInt8", math.MinInt8)
	_register("math.Mod", math.Mod)
	_register("math.Modf", math.Modf)
	_register("math.NaN", math.NaN)
	_register("math.Nextafter", math.Nextafter)
	_register("math.Nextafter32", math.Nextafter32)
	_register("math.Phi", math.Phi)
	_register("math.Pi", math.Pi)
	_register("math.Pow", math.Pow)
	_register("math.Pow10", math.Pow10)
	_register("math.Remainder", math.Remainder)
	_register("math.Round", math.Round)
	_register("math.RoundToEven", math.RoundToEven)
	_register("math.Signbit", math.Signbit)
	_register("math.Sin", math.Sin)
	_register("math.Sincos", math.Sincos)
	_register("math.Sinh", math.Sinh)
	_register("math.SmallestNonzeroFloat32", math.SmallestNonzeroFloat32)
	_register("math.SmallestNonzeroFloat64", math.SmallestNonzeroFloat64)
	_register("math.Sqrt", math.Sqrt)
	_register("math.Sqrt2", math.Sqrt2)
	_register("math.SqrtE", math.SqrtE)
	_register("math.SqrtPhi", math.SqrtPhi)
	_register("math.SqrtPi", math.SqrtPi)
	_register("math.Tan", math.Tan)
	_register("math.Tanh", math.Tanh)
	_register("math.Trunc", math.Trunc)
	_register("math.Y0", math.Y0)
	_register("math.Y1", math.Y1)
	_register("math.Yn", math.Yn)

	// package math/big
	////////////////////////////////////////
	_register("math/big.Above", math_big.Above)
	_register("math/big.Accuracy", reflect.TypeOf((*math_big.Accuracy)(nil)).Elem())
	_register("math/big.AwayFromZero", math_big.AwayFromZero)
	_register("math/big.Below", math_big.Below)
	_register("math/big.ErrNaN", reflect.TypeOf((*math_big.ErrNaN)(nil)).Elem())
	_register("math/big.Exact", math_big.Exact)
	_register("math/big.Float", reflect.TypeOf((*math_big.Float)(nil)).Elem())
	_register("math/big.Int", reflect.TypeOf((*math_big.Int)(nil)).Elem())
	_register("math/big.Jacobi", math_big.Jacobi)
	_register("math/big.MaxBase", math_big.MaxBase)
	_register("math/big.MaxExp", math_big.MaxExp)
	_register("math/big.MaxPrec", math_big.MaxPrec)
	_register("math/big.MinExp", math_big.MinExp)
	_register("math/big.NewFloat", math_big.NewFloat)
	_register("math/big.NewInt", math_big.NewInt)
	_register("math/big.NewRat", math_big.NewRat)
	_register("math/big.ParseFloat", math_big.ParseFloat)
	_register("math/big.Rat", reflect.TypeOf((*math_big.Rat)(nil)).Elem())
	_register("math/big.RoundingMode", reflect.TypeOf((*math_big.RoundingMode)(nil)).Elem())
	_register("math/big.ToNearestAway", math_big.ToNearestAway)
	_register("math/big.ToNearestEven", math_big.ToNearestEven)
	_register("math/big.ToNegativeInf", math_big.ToNegativeInf)
	_register("math/big.ToPositiveInf", math_big.ToPositiveInf)
	_register("math/big.ToZero", math_big.ToZero)
	_register("math/big.Word", reflect.TypeOf((*math_big.Word)(nil)).Elem())

	// package math/rand
	////////////////////////////////////////
	_register("math/rand.ExpFloat64", math_rand.ExpFloat64)
	_register("math/rand.Float32", math_rand.Float32)
	_register("math/rand.Float64", math_rand.Float64)
	_register("math/rand.Int", math_rand.Int)
	_register("math/rand.Int31", math_rand.Int31)
	_register("math/rand.Int31n", math_rand.Int31n)
	_register("math/rand.Int63", math_rand.Int63)
	_register("math/rand.Int63n", math_rand.Int63n)
	_register("math/rand.Intn", math_rand.Intn)
	_register("math/rand.New", math_rand.New)
	_register("math/rand.NewSource", math_rand.NewSource)
	_register("math/rand.NewZipf", math_rand.NewZipf)
	_register("math/rand.NormFloat64", math_rand.NormFloat64)
	_register("math/rand.Perm", math_rand.Perm)
	_register("math/rand.Rand", reflect.TypeOf((*math_rand.Rand)(nil)).Elem())
	_register("math/rand.Read", math_rand.Read)
	_register("math/rand.Seed", math_rand.Seed)
	_register("math/rand.Shuffle", math_rand.Shuffle)
	_register("math/rand.Source", reflect.TypeOf((*math_rand.Source)(nil)).Elem())
	_register("math/rand.Source64", reflect.TypeOf((*math_rand.Source64)(nil)).Elem())
	_register("math/rand.Uint32", math_rand.Uint32)
	_register("math/rand.Uint64", math_rand.Uint64)
	_register("math/rand.Zipf", reflect.TypeOf((*math_rand.Zipf)(nil)).Elem())

	// package net/http
	////////////////////////////////////////
	_register("net/http.AllowQuerySemicolons", net_http.AllowQuerySemicolons)
	_register("net/http.CanonicalHeaderKey", net_http.CanonicalHeaderKey)
	_register("net/http.Client", reflect.TypeOf((*net_http.Client)(nil)).Elem())
	_register("net/http.CloseNotifier", reflect.TypeOf((*net_http.CloseNotifier)(nil)).Elem())
	_register("net/http.ConnState", reflect.TypeOf((*net_http.ConnState)(nil)).Elem())
	_register("net/http.Cookie", reflect.TypeOf((*net_http.Cookie)(nil)).Elem())
	_register("net/http.CookieJar", reflect.TypeOf((*net_http.CookieJar)(nil)).Elem())
	_register("net/http.DefaultClient", net_http.DefaultClient)
	_register("net/http.DefaultMaxHeaderBytes", net_http.DefaultMaxHeaderBytes)
	_register("net/http.DefaultMaxIdleConnsPerHost", net_http.DefaultMaxIdleConnsPerHost)
	_register("net/http.DefaultServeMux", net_http.DefaultServeMux)
	_register("net/http.DefaultTransport", net_http.DefaultTransport)
	_register("net/http.DetectContentType", net_http.DetectContentType)
	_register("net/http.Dir", reflect.TypeOf((*net_http.Dir)(nil)).Elem())
	_register("net/http.ErrAbortHandler", net_http.ErrAbortHandler)
	_register("net/http.ErrBodyNotAllowed", net_http.ErrBodyNotAllowed)
	_register("net/http.ErrBodyReadAfterClose", net_http.ErrBodyReadAfterClose)
	_register("net/http.ErrContentLength", net_http.ErrContentLength)
	_register("net/http.ErrHandlerTimeout", net_http.ErrHandlerTimeout)
	_register("net/http.ErrHeaderTooLong", net_http.ErrHeaderTooLong)
	_register("net/http.ErrHijacked", net_http.ErrHijacked)
	_register("net/http.ErrLineTooLong", net_http.ErrLineTooLong)
	_register("net/http.ErrMissingBoundary", net_http.ErrMissingBoundary)
	_register("net/http.ErrMissingContentLength", net_http.ErrMissingContentLength)
	_register("net/http.ErrMissingFile", net_http.ErrMissingFile)
	_register("net/http.ErrNoCookie", net_http.ErrNoCookie)
	_register("net/http.ErrNoLocation", net_http.ErrNoLocation)
	_register("net/http.ErrNotMultipart", net_http.ErrNotMultipart)
	_register("net/http.ErrNotSupported", net_http.ErrNotSupported)
	_register("net/http.ErrServerClosed", net_http.ErrServerClosed)
	_register("net/http.ErrShortBody", net_http.ErrShortBody)
	_register("net/http.ErrSkipAltProtocol", net_http.ErrSkipAltProtocol)
	_register("net/http.ErrUnexpectedTrailer", net_http.ErrUnexpectedTrailer)
	_register("net/http.ErrUseLastResponse", net_http.ErrUseLastResponse)
	_register("net/http.ErrWriteAfterFlush", net_http.ErrWriteAfterFlush)
	_register("net/http.Error", net_http.Error)
	_register("net/http.FS", net_http.FS)
	_register("net/http.File", reflect.TypeOf((*net_http.File)(nil)).Elem())
	_register("net/http.FileServer", net_http.FileServer)
	_register("net/http.FileSystem", reflect.TypeOf((*net_http.FileSystem)(nil)).Elem())
	_register("net/http.Flusher", reflect.TypeOf((*net_http.Flusher)(nil)).Elem())
	_register("net/http.Get", net_http.Get)
	_register("net/http.Handle", net_http.Handle)
	_register("net/http.HandleFunc", net_http.HandleFunc)
	_register("net/http.Handler", reflect.TypeOf((*net_http.Handler)(nil)).Elem())
	_register("net/http.HandlerFunc", reflect.TypeOf((*net_http.HandlerFunc)(nil)).Elem())
	_register("net/http.Head", net_http.Head)
	_register("net/http.Header", reflect.TypeOf((*net_http.Header)(nil)).Elem())
	_register("net/http.Hijacker", reflect.TypeOf((*net_http.Hijacker)(nil)).Elem())
	_register("net/http.ListenAndServe", net_http.ListenAndServe)
	_register("net/http.ListenAndServeTLS", net_http.ListenAndServeTLS)
	_register("net/http.LocalAddrContextKey", net_http.LocalAddrContextKey)
	_register("net/http.MaxBytesError", reflect.TypeOf((*net_http.MaxBytesError)(nil)).Elem())
	_register("net/http.MaxBytesHandler", net_http.MaxBytesHandler)
	_register("net/http.MaxBytesReader", net_http.MaxBytesReader)
	_register("net/http.MethodConnect", net_http.MethodConnect)
	_register("net/http.MethodDelete", net_http.MethodDelete)
	_register("net/http.MethodGet", net_http.MethodGet)
	_register("net/http.MethodHead", net_http.MethodHead)
	_register("net/http.MethodOptions", net_http.MethodOptions)
	_register("net/http.MethodPatch", net_http.MethodPatch)
	_register("net/http.MethodPost", net_http.MethodPost)
	_register("net/http.MethodPut", net_http.MethodPut)
	_register("net/http.MethodTrace", net_http.MethodTrace)
	_register("net/http.NewFileTransport", net_http.NewFileTransport)
	_register("net/http.NewRequest", net_http.NewRequest)
	_register("net/http.NewRequestWithContext", net_http.NewRequestWithContext)
	_register("net/http.NewServeMux", net_http.NewServeMux)
	_register("net/http.NoBody", net_http.NoBody)
	_register("net/http.NotFound", net_http.NotFound)
	_register("net/http.NotFoundHandler", net_http.NotFoundHandler)
	_register("net/http.ParseHTTPVersion", net_http.ParseHTTPVersion)
	_register("net/http.ParseTime", net_http.ParseTime)
	_register("net/http.Post", net_http.Post)
	_register("net/http.PostForm", net_http.PostForm)
	_register("net/http.ProtocolError", reflect.TypeOf((*net_http.ProtocolError)(nil)).Elem())
	_register("net/http.ProxyFromEnvironment", net_http.ProxyFromEnvironment)
	_register("net/http.ProxyURL", net_http.ProxyURL)
	_register("net/http.PushOptions", reflect.TypeOf((*net_http.PushOptions)(nil)).Elem())
	_register("net/http.Pusher", reflect.TypeOf((*net_http.Pusher)(nil)).Elem())
	_register("net/http.ReadRequest", net_http.ReadRequest)
	_register("net/http.ReadResponse", net_http.ReadResponse)
	_register("net/http.Redirect", net_http.Redirect)
	_register("net/http.RedirectHandler", net_http.RedirectHandler)
	_register("net/http.Request", reflect.TypeOf((*net_http.Request)(nil)).Elem())
	_register("net/http.Response", reflect.TypeOf((*net_http.Response)(nil)).Elem())
	_register("net/http.ResponseWriter", reflect.TypeOf((*net_http.ResponseWriter)(nil)).Elem())
	_register("net/http.RoundTripper", reflect.TypeOf((*net_http.RoundTripper)(nil)).Elem())
	_register("net/http.SameSite", reflect.TypeOf((*net_http.SameSite)(nil)).Elem())
	_register("net/http.SameSiteDefaultMode", net_http.SameSiteDefaultMode)
	_register("net/http.SameSiteLaxMode", net_http.SameSiteLaxMode)
	_register("net/http.SameSiteNoneMode", net_http.SameSiteNoneMode)
	_register("net/http.SameSiteStrictMode", net_http.SameSiteStrictMode)
	_register("net/http.Serve", net_http.Serve)
	_register("net/http.ServeContent", net_http.ServeContent)
	_register("net/http.ServeFile", net_http.ServeFile)
	_register("net/http.ServeMux", reflect.TypeOf((*net_http.ServeMux)(nil)).Elem())
	_register("net/http.ServeTLS", net_http.ServeTLS)
	_register("net/http.Server", reflect.TypeOf((*net_http.Server)(nil)).Elem())
	_register("net/http.ServerContextKey", net_http.ServerContextKey)
	_register("net/http.SetCookie", net_http.SetCookie)
	_register("net/http.StateActive", net_http.StateActive)
	_register("net/http.StateClosed", net_http.StateClosed)
	_register("net/http.StateHijacked", net_http.StateHijacked)
	_register("net/http.StateIdle", net_http.StateIdle)
	_register("net/http.StateNew", net_http.StateNew)
	_register("net/http.StatusAccepted", net_http.StatusAccepted)
	_register("net/http.StatusAlreadyReported", net_http.StatusAlreadyReported)
	_register("net/http.StatusBadGateway", net_http.StatusBadGateway)
	_register("net/http.StatusBadRequest", net_http.StatusBadRequest)
	_register("net/http.StatusConflict", net_http.StatusConflict)
	_register("net/http.StatusContinue", net_http.StatusContinue)
	_register("net/http.StatusCreated", net_http.StatusCreated)
	_register("net/http.StatusEarlyHints", net_http.StatusEarlyHints)
	_register("net/http.StatusExpectationFailed", net_http.StatusExpectationFailed)
	_register("net/http.StatusFailedDependency", net_http.StatusFailedDependency)
	_register("net/http.StatusForbidden", net_http.StatusForbidden)
	_register("net/http.StatusFound", net_http.StatusFound)
	_register("net/http.StatusGatewayTimeout", net_http.StatusGatewayTimeout)
	_register("net/http.StatusGone", net_http.StatusGone)
	_register("net/http.StatusHTTPVersionNotSupported", net_http.StatusHTTPVersionNotSupported)
	_register("net/http.StatusIMUsed", net_http.StatusIMUsed)
	_register("net/http.StatusInsufficientStorage", net_http.StatusInsufficientStorage)
	_register("net/http.StatusInternalServerError", net_http.StatusInternalServerError)
	_register("net/http.StatusLengthRequired", net_http.StatusLengthRequired)
	_register("net/http.StatusLocked", net_http.StatusLocked)
	_register("net/http.StatusLoopDetected", net_http.StatusLoopDetected)
	_register("net/http.StatusMethodNotAllowed", net_http.StatusMethodNotAllowed)
	_register("net/http.StatusMisdirectedRequest", net_http.StatusMisdirectedRequest)
	_register("net/http.StatusMovedPermanently", net_http.StatusMovedPermanently)
	_register("net/http.StatusMultiStatus", net_http.StatusMultiStatus)
	_register("net/http.StatusMultipleChoices", net_http.StatusMultipleChoices)
	_register("net/http.StatusNetworkAuthenticationRequired", net_http.StatusNetworkAuthenticationRequired)
	_register("net/http.StatusNoContent", net_http.StatusNoContent)
	_register("net/http.StatusNonAuthoritativeInfo", net_http.StatusNonAuthoritativeInfo)
	_register("net/http.StatusNotAcceptable", net_http.StatusNotAcceptable)
	_register("net/http.StatusNotExtended", net_http.StatusNotExtended)
	_register("net/http.StatusNotFound", net_http.StatusNotFound)
	_register("net/http.StatusNotImplemented", net_http.StatusNotImplemented)
	_register("net/http.StatusNotModified", net_http.StatusNotModified)
	_register("net/http.StatusOK", net_http.StatusOK)
	_register("net/http.StatusPartialContent", net_http.StatusPartialContent)
	_register("net/http.StatusPaymentRequired", net_http.StatusPaymentRequired)
	_register("net/http.StatusPermanentRedirect", net_http.StatusPermanentRedirect)
	_register("net/http.StatusPreconditionFailed", net_http.StatusPreconditionFailed)
	_register("net/http.StatusPreconditionRequired", net_http.StatusPreconditionRequired)
	_register("net/http.StatusProcessing", net_http.StatusProcessing)
	_register("net/http.StatusProxyAuthRequired", net_http.StatusProxyAuthRequired)
	_register("net/http.StatusRequestEntityTooLarge", net_http.StatusRequestEntityTooLarge)
	_register("net/http.StatusRequestHeaderFieldsTooLarge", net_http.StatusRequestHeaderFieldsTooLarge)
	_register("net/http.StatusRequestTimeout", net_http.StatusRequestTimeout)
	_register("net/http.StatusRequestURITooLong", net_http.StatusRequestURITooLong)
	_register("net/http.StatusRequestedRangeNotSatisfiable", net_http.StatusRequestedRangeNotSatisfiable)
	_register("net/http.StatusResetContent", net_http.StatusResetContent)
	_register("net/http.StatusSeeOther", net_http.StatusSeeOther)
	_register("net/http.StatusServiceUnavailable", net_http.StatusServiceUnavailable)
	_register("net/http.StatusSwitchingProtocols", net_http.StatusSwitchingProtocols)
	_register("net/http.StatusTeapot", net_http.StatusTeapot)
	_register("net/http.StatusTemporaryRedirect", net_http.StatusTemporaryRedirect)
	_register("net/http.StatusText", net_http.StatusText)
	_register("net/http.StatusTooEarly", net_http.StatusTooEarly)
	_register("net/http.StatusTooManyRequests", net_http.StatusTooManyRequests)
	_register("net/http.StatusUnauthorized", net_http.StatusUnauthorized)
	_register("net/http.StatusUnavailableForLegalReasons", net_http.StatusUnavailableForLegalReasons)
	_register("net/http.StatusUnprocessableEntity", net_http.StatusUnprocessableEntity)
	_register("net/http.StatusUnsupportedMediaType", net_http.StatusUnsupportedMediaType)
	_register("net/http.StatusUpgradeRequired", net_http.StatusUpgradeRequired)
	_register("net/http.StatusUseProxy", net_http.StatusUseProxy)
	_register("net/http.StatusVariantAlsoNegotiates", net_http.StatusVariantAlsoNegotiates)
	_register("net/http.StripPrefix", net_http.StripPrefix)
	_register("net/http.TimeFormat", net_http.TimeFormat)
	_register("net/http.TimeoutHandler", net_http.TimeoutHandler)
	_register("net/http.TrailerPrefix", net_http.TrailerPrefix)
	_register("net/http.Transport", reflect.TypeOf((*net_http.Transport)(nil)).Elem())

	// package os
	////////////////////////////////////////
	_register("os.Args", os.Args)
	_register("os.Chdir", os.Chdir)
	_register("os.Chmod", os.Chmod)
	_register("os.Chown", os.Chown)
	_register("os.Chtimes", os.Chtimes)
	_register("os.Clearenv", os.Clearenv)
	_register("os.Create", os.Create)
	_register("os.CreateTemp", os.CreateTemp)
	_register("os.DevNull", os.DevNull)
	_register("os.DirEntry", reflect.TypeOf((*os.DirEntry)(nil)).Elem())
	_register("os.DirFS", os.DirFS)
	_register("os.Environ", os.Environ)
	_register("os.ErrClosed", os.ErrClosed)
	_register("os.ErrDeadlineExceeded", os.ErrDeadlineExceeded)
	_register("os.ErrExist", os.ErrExist)
	_register("os.ErrInvalid", os.ErrInvalid)
	_register("os.ErrNoDeadline", os.ErrNoDeadline)
	_register("os.ErrNotExist", os.ErrNotExist)
	_register("os.ErrPermission", os.ErrPermission)
	_register("os.ErrProcessDone", os.ErrProcessDone)
	_register("os.Executable", os.Executable)
	_register("os.Exit", os.Exit)
	_register("os.Expand", os.Expand)
	_register("os.ExpandEnv", os.ExpandEnv)
	_register("os.File", reflect.TypeOf((*os.File)(nil)).Elem())
	_register("os.FileInfo", reflect.TypeOf((*os.FileInfo)(nil)).Elem())
	_register("os.FileMode", reflect.TypeOf((*os.FileMode)(nil)).Elem())
	_register("os.FindProcess", os.FindProcess)
	_register("os.Getegid", os.Getegid)
	_register("os.Getenv", os.Getenv)
	_register("os.Geteuid", os.Geteuid)
	_register("os.Getgid", os.Getgid)
	_register("os.Getgroups", os.Getgroups)
	_register("os.Getpagesize", os.Getpagesize)
	_register("os.Getpid", os.Getpid)
	_register("os.Getppid", os.Getppid)
	_register("os.Getuid", os.Getuid)
	_register("os.Getwd", os.Getwd)
	_register("os.Hostname", os.Hostname)
	_register("os.Interrupt", os.Interrupt)
	_register("os.IsExist", os.IsExist)
	_register("os.IsNotExist", os.IsNotExist)
	_register("os.IsPathSeparator", os.IsPathSeparator)
	_register("os.IsPermission", os.IsPermission)
	_register("os.IsTimeout", os.IsTimeout)
	_register("os.Kill", os.Kill)
	_register("os.Lchown", os.Lchown)
	_register("os.Link", os.Link)
	_register("os.LinkError", reflect.TypeOf((*os.LinkError)(nil)).Elem())
	_register("os.LookupEnv", os.LookupEnv)
	_register("os.Lstat", os.Lstat)
	_register("os.Mkdir", os.Mkdir)
	_register("os.MkdirAll", os.MkdirAll)
	_register("os.MkdirTemp", os.MkdirTemp)
	_register("os.ModeAppend", os.ModeAppend)
	_register("os.ModeCharDevice", os.ModeCharDevice)
	_register("os.ModeDevice", os.ModeDevice)
	_register("os.ModeDir", os.ModeDir)
	_register("os.ModeExclusive", os.ModeExclusive)
	_register("os.ModeIrregular", os.ModeIrregular)
	_register("os.ModeNamedPipe", os.ModeNamedPipe)
	_register("os.ModePerm", os.ModePerm)
	_register("os.ModeSetgid", os.ModeSetgid)
	_register("os.ModeSetuid", os.ModeSetuid)
	_register("os.ModeSocket", os.ModeSocket)
	_register("os.ModeSticky", os.ModeSticky)
	_register("os.ModeSymlink", os.ModeSymlink)
	_register("os.ModeTemporary", os.ModeTemporary)
	_register("os.ModeType", os.ModeType)
	_register("os.NewFile", os.NewFile)
	_register("os.NewSyscallError", os.NewSyscallError)
	_register("os.O_APPEND", os.O_APPEND)
	_register("os.O_CREATE", os.O_CREATE)
	_register("os.O_EXCL", os.O_EXCL)
	_register("os.O_RDONLY", os.O_RDONLY)
	_register("os.O_RDWR", os.O_RDWR)
	_register("os.O_SYNC", os.O_SYNC)
	_register("os.O_TRUNC", os.O_TRUNC)
	_register("os.O_WRONLY", os.O_WRONLY)
	_register("os.Open", os.Open)
	_register("os.OpenFile", os.OpenFile)
	_register("os.PathError", reflect.TypeOf((*os.PathError)(nil)).Elem())
	_register("os.PathListSeparator", os.PathListSeparator)
	_register("os.PathSeparator", os.PathSeparator)
	_register("os.Pipe", os.Pipe)
	_register("os.ProcAttr", reflect.TypeOf((*os.ProcAttr)(nil)).Elem())
	_register("os.Process", reflect.TypeOf((*os.Process)(nil)).Elem())
	_register("os.ProcessState", reflect.TypeOf((*os.ProcessState)(nil)).Elem())
	_register("os.ReadDir", os.ReadDir)
	_register("os.ReadFile", os.ReadFile)
	_register("os.Readlink", os.Readlink)
	_register("os.Remove", os.Remove)
	_register("os.RemoveAll", os.RemoveAll)
	_register("os.Rename", os.Rename)
	_register("os.SEEK_CUR", os.SEEK_CUR)
	_register("os.SEEK_END", os.SEEK_END)
	_register("os.SEEK_SET", os.SEEK_SET)
	_register("os.SameFile", os.SameFile)
	_register("os.Setenv", os.Setenv)
	_register("os.Signal", reflect.TypeOf((*os.Signal)(nil)).Elem())
	_register("os.StartProcess", os.StartProcess)
	_register("os.Stat", os.Stat)
	_register("os.Stderr", os.Stderr)
	_register("os.Stdin", os.Stdin)
	_register("os.Stdout", os.Stdout)
	_register("os.Symlink", os.Symlink)
	_register("os.SyscallError", reflect.TypeOf((*os.SyscallError)(nil)).Elem())
	_register("os.TempDir", os.TempDir)
	_register("os.Truncate", os.Truncate)
	_register("os.Unsetenv", os.Unsetenv)
	_register("os.UserCacheDir", os.UserCacheDir)
	_register("os.UserConfigDir", os.UserConfigDir)
	_register("os.UserHomeDir", os.UserHomeDir)
	_register("os.WriteFile", os.WriteFile)

	// package os/exec
	////////////////////////////////////////
	_register("os/exec.Cmd", reflect.TypeOf((*os_exec.Cmd)(nil)).Elem())
	_register("os/exec.Command", os_exec.Command)
	_register("os/exec.CommandContext", os_exec.CommandContext)
	_register("os/exec.ErrDot", os_exec.ErrDot)
	_register("os/exec.ErrNotFound", os_exec.ErrNotFound)
	_register("os/exec.Error", reflect.TypeOf((*os_exec.Error)(nil)).Elem())
	_register("os/exec.ExitError", reflect.TypeOf((*os_exec.ExitError)(nil)).Elem())
	_register("os/exec.LookPath", os_exec.LookPath)

	// package os/signal
	////////////////////////////////////////
	_register("os/signal.Ignore", os_signal.Ignore)
	_register("os/signal.Ignored", os_signal.Ignored)
	_register("os/signal.Notify", os_signal.Notify)
	_register("os/signal.NotifyContext", os_signal.NotifyContext)
	_register("os/signal.Reset", os_signal.Reset)
	_register("os/signal.Stop", os_signal.Stop)

	// package regexp
	////////////////////////////////////////
	_register("regexp.Compile", regexp.Compile)
	_register("regexp.CompilePOSIX", regexp.CompilePOSIX)
	_register("regexp.Match", regexp.Match)
	_register("regexp.MatchReader", regexp.MatchReader)
	_register("regexp.MatchString", regexp.MatchString)
	_register("regexp.MustCompile", regexp.MustCompile)
	_register("regexp.MustCompilePOSIX", regexp.MustCompilePOSIX)
	_register("regexp.QuoteMeta", regexp.QuoteMeta)
	_register("regexp.Regexp", reflect.TypeOf((*regexp.Regexp)(nil)).Elem())

	// package reflect
	////////////////////////////////////////
	_register("reflect.Append", reflect.Append)
	_register("reflect.AppendSlice", reflect.AppendSlice)
	_register("reflect.Array", reflect.Array)
	_register("reflect.ArrayOf", reflect.ArrayOf)
	_register("reflect.Bool", reflect.Bool)
	_register("reflect.BothDir", reflect.BothDir)
	_register("reflect.Chan", reflect.Chan)
	_register("reflect.ChanDir", reflect.TypeOf((*reflect.ChanDir)(nil)).Elem())
	_register("reflect.ChanOf", reflect.ChanOf)
	_register("reflect.Complex128", reflect.Complex128)
	_register("reflect.Complex64", reflect.Complex64)
	_register("reflect.Copy", reflect.Copy)
	_register("reflect.DeepEqual", reflect.DeepEqual)
	_register("reflect.Float32", reflect.Float32)
	_register("reflect.Float64", reflect.Float64)
	_register("reflect.Func", reflect.Func)
	_register("reflect.FuncOf", reflect.FuncOf)
	_register("reflect.Indirect", reflect.Indirect)
	_register("reflect.Int", reflect.Int)
	_register("reflect.Int16", reflect.Int16)
	_register("reflect.Int32", reflect.Int32)
	_register("reflect.Int64", reflect.Int64)
	_register("reflect.Int8", reflect.Int8)
	_register("reflect.Interface", reflect.Interface)
	_register("reflect.Invalid", reflect.Invalid)
	_register("reflect.Kind", reflect.TypeOf((*reflect.Kind)(nil)).Elem())
	_register("reflect.MakeChan", reflect.MakeChan)
	_register("reflect.MakeFunc", reflect.MakeFunc)
	_register("reflect.MakeMap", reflect.MakeMap)
	_register("reflect.MakeMapWithSize", reflect.MakeMapWithSize)
	_register("reflect.MakeSlice", reflect.MakeSlice)
	_register("reflect.Map", reflect.Map)
	_register("reflect.MapIter", reflect.TypeOf((*reflect.MapIter)(nil)).Elem())
	_register("reflect.MapOf", reflect.MapOf)
	_register("reflect.Method", reflect.TypeOf((*reflect.Method)(nil)).Elem())
	_register("reflect.New", reflect.New)
	_register("reflect.NewAt", reflect.NewAt)
	_register("reflect.Pointer", reflect.Pointer)
	_register("reflect.PointerTo", reflect.PointerTo)
	_register("reflect.Ptr", reflect.Ptr)
	_register("reflect.PtrTo", reflect.PtrTo)
	_register("reflect.RecvDir", reflect.RecvDir)
	_register("reflect.Select", reflect.Select)
	_register("reflect.SelectCase", reflect.TypeOf((*reflect.SelectCase)(nil)).Elem())
	_register("reflect.SelectDefault", reflect.SelectDefault)
	_register("reflect.SelectDir", reflect.TypeOf((*reflect.SelectDir)(nil)).Elem())
	_register("reflect.SelectRecv", reflect.SelectRecv)
	_register("reflect.SelectSend", reflect.SelectSend)
	_register("reflect.SendDir", reflect.SendDir)
	_register("reflect.Slice", reflect.Slice)
	_register("reflect.SliceHeader", reflect.TypeOf((*reflect.SliceHeader)(nil)).Elem())
	_register("reflect.SliceOf", reflect.SliceOf)
	_register("reflect.String", reflect.String)
	_register("reflect.StringHeader", reflect.TypeOf((*reflect.StringHeader)(nil)).Elem())
	_register("reflect.Struct", reflect.Struct)
	_register("reflect.StructField", reflect.TypeOf((*reflect.StructField)(nil)).Elem())
	_register("reflect.StructOf", reflect.StructOf)
	_register("reflect.StructTag", reflect.TypeOf((*reflect.StructTag)(nil)).Elem())
	_register("reflect.Swapper", reflect.Swapper)
	_register("reflect.Type", reflect.TypeOf((*reflect.Type)(nil)).Elem())
	_register("reflect.TypeOf", reflect.TypeOf)
	_register("reflect.Uint", reflect.Uint)
	_register("reflect.Uint16", reflect.Uint16)
	_register("reflect.Uint32", reflect.Uint32)
	_register("reflect.Uint64", reflect.Uint64)
	_register("reflect.Uint8", reflect.Uint8)
	_register("reflect.Uintptr", reflect.Uintptr)
	_register("reflect.UnsafePointer", reflect.UnsafePointer)
	_register("reflect.Value", reflect.TypeOf((*reflect.Value)(nil)).Elem())
	_register("reflect.ValueError", reflect.TypeOf((*reflect.ValueError)(nil)).Elem())
	_register("reflect.ValueOf", reflect.ValueOf)
	_register("reflect.VisibleFields", reflect.VisibleFields)
	_register("reflect.Zero", reflect.Zero)

	// package sort
	////////////////////////////////////////
	_register("sort.Find", sort.Find)
	_register("sort.Float64Slice", reflect.TypeOf((*sort.Float64Slice)(nil)).Elem())
	_register("sort.Float64s", sort.Float64s)
	_register("sort.Float64sAreSorted", sort.Float64sAreSorted)
	_register("sort.IntSlice", reflect.TypeOf((*sort.IntSlice)(nil)).Elem())
	_register("sort.Interface", reflect.TypeOf((*sort.Interface)(nil)).Elem())
	_register("sort.Ints", sort.Ints)
	_register("sort.IntsAreSorted", sort.IntsAreSorted)
	_register("sort.IsSorted", sort.IsSorted)
	_register("sort.Reverse", sort.Reverse)
	_register("sort.Search", sort.Search)
	_register("sort.SearchFloat64s", sort.SearchFloat64s)
	_register("sort.SearchInts", sort.SearchInts)
	_register("sort.SearchStrings", sort.SearchStrings)
	_register("sort.Slice", sort.Slice)
	_register("sort.SliceIsSorted", sort.SliceIsSorted)
	_register("sort.SliceStable", sort.SliceStable)
	_register("sort.Sort", sort.Sort)
	_register("sort.Stable", sort.Stable)
	_register("sort.StringSlice", reflect.TypeOf((*sort.StringSlice)(nil)).Elem())
	_register("sort.Strings", sort.Strings)
	_register("sort.StringsAreSorted", sort.StringsAreSorted)

	// package strconv
	////////////////////////////////////////
	_register("strconv.AppendBool", strconv.AppendBool)
	_register("strconv.AppendFloat", strconv.AppendFloat)
	_register("strconv.AppendInt", strconv.AppendInt)
	_register("strconv.AppendQuote", strconv.AppendQuote)
	_register("strconv.AppendQuoteRune", strconv.AppendQuoteRune)
	_register("strconv.AppendQuoteRuneToASCII", strconv.AppendQuoteRuneToASCII)
	_register("strconv.AppendQuoteRuneToGraphic", strconv.AppendQuoteRuneToGraphic)
	_register("strconv.AppendQuoteToASCII", strconv.AppendQuoteToASCII)
	_register("strconv.AppendQuoteToGraphic", strconv.AppendQuoteToGraphic)
	_register("strconv.AppendUint", strconv.AppendUint)
	_register("strconv.Atoi", strconv.Atoi)
	_register("strconv.CanBackquote", strconv.CanBackquote)
	_register("strconv.ErrRange", strconv.ErrRange)
	_register("strconv.ErrSyntax", strconv.ErrSyntax)
	_register("strconv.FormatBool", strconv.FormatBool)
	_register("strconv.FormatComplex", strconv.FormatComplex)
	_register("strconv.FormatFloat", strconv.FormatFloat)
	_register("strconv.FormatInt", strconv.FormatInt)
	_register("strconv.FormatUint", strconv.FormatUint)
	_register("strconv.IntSize", strconv.IntSize)
	_register("strconv.IsGraphic", strconv.IsGraphic)
	_register("strconv.IsPrint", strconv.IsPrint)
	_register("strconv.Itoa", strconv.Itoa)
	_register("strconv.NumError", reflect.TypeOf((*strconv.NumError)(nil)).Elem())
	_register("strconv.ParseBool", strconv.ParseBool)
	_register("strconv.ParseComplex", strconv.ParseComplex)
	_register("strconv.ParseFloat", strconv.ParseFloat)
	_register("strconv.ParseInt", strconv.ParseInt)
	_register("strconv.ParseUint", strconv.ParseUint)
	_register("strconv.Quote", strconv.Quote)
	_register("strconv.QuoteRune", strconv.QuoteRune)
	_register("strconv.QuoteRuneToASCII", strconv.QuoteRuneToASCII)
	_register("strconv.QuoteRuneToGraphic", strconv.QuoteRuneToGraphic)
	_register("strconv.QuoteToASCII", strconv.QuoteToASCII)
	_register("strconv.QuoteToGraphic", strconv.QuoteToGraphic)
	_register("strconv.QuotedPrefix", strconv.QuotedPrefix)
	_register("strconv.Unquote", strconv.Unquote)
	_register("strconv.UnquoteChar", strconv.UnquoteChar)

	// package strings
	////////////////////////////////////////
	_register("strings.Builder", reflect.TypeOf((*strings.Builder)(nil)).Elem())
	_register("strings.Clone", strings.Clone)
	_register("strings.Compare", strings.Compare)
	_register("strings.Contains", strings.Contains)
	_register("strings.ContainsAny", strings.ContainsAny)
	_register("strings.ContainsRune", strings.ContainsRune)
	_register("strings.Count", strings.Count)
	_register("strings.Cut", strings.Cut)
	_register("strings.EqualFold", strings.EqualFold)
	_register("strings.Fields", strings.Fields)
	_register("strings.FieldsFunc", strings.FieldsFunc)
	_register("strings.HasPrefix", strings.HasPrefix)
	_register("strings.HasSuffix", strings.HasSuffix)
	_register("strings.Index", strings.Index)
	_register("strings.IndexAny", strings.IndexAny)
	_register("strings.IndexByte", strings.IndexByte)
	_register("strings.IndexFunc", strings.IndexFunc)
	_register("strings.IndexRune", strings.IndexRune)
	_register("strings.Join", strings.Join)
	_register("strings.LastIndex", strings.LastIndex)
	_register("strings.LastIndexAny", strings.LastIndexAny)
	_register("strings.LastIndexByte", strings.LastIndexByte)
	_register("strings.LastIndexFunc", strings.LastIndexFunc)
	_register("strings.Map", strings.Map)
	_register("strings.NewReader", strings.NewReader)
	_register("strings.NewReplacer", strings.NewReplacer)
	_register("strings.Reader", reflect.TypeOf((*strings.Reader)(nil)).Elem())
	_register("strings.Repeat", strings.Repeat)
	_register("strings.Replace", strings.Replace)
	_register("strings.ReplaceAll", strings.ReplaceAll)
	_register("strings.Replacer", reflect.TypeOf((*strings.Replacer)(nil)).Elem())
	_register("strings.Split", strings.Split)
	_register("strings.SplitAfter", strings.SplitAfter)
	_register("strings.SplitAfterN", strings.SplitAfterN)
	_register("strings.SplitN", strings.SplitN)
	_register("strings.Title", strings.Title)
	_register("strings.ToLower", strings.ToLower)
	_register("strings.ToLowerSpecial", strings.ToLowerSpecial)
	_register("strings.ToTitle", strings.ToTitle)
	_register("strings.ToTitleSpecial", strings.ToTitleSpecial)
	_register("strings.ToUpper", strings.ToUpper)
	_register("strings.ToUpperSpecial", strings.ToUpperSpecial)
	_register("strings.ToValidUTF8", strings.ToValidUTF8)
	_register("strings.Trim", strings.Trim)
	_register("strings.TrimFunc", strings.TrimFunc)
	_register("strings.TrimLeft", strings.TrimLeft)
	_register("strings.TrimLeftFunc", strings.TrimLeftFunc)
	_register("strings.TrimPrefix", strings.TrimPrefix)
	_register("strings.TrimRight", strings.TrimRight)
	_register("strings.TrimRightFunc", strings.TrimRightFunc)
	_register("strings.TrimSpace", strings.TrimSpace)
	_register("strings.TrimSuffix", strings.TrimSuffix)

	// package time
	////////////////////////////////////////
	_register("time.ANSIC", time.ANSIC)
	_register("time.After", time.After)
	_register("time.AfterFunc", time.AfterFunc)
	_register("time.April", time.April)
	_register("time.August", time.August)
	_register("time.Date", time.Date)
	_register("time.December", time.December)
	_register("time.Duration", reflect.TypeOf((*time.Duration)(nil)).Elem())
	_register("time.February", time.February)
	_register("time.FixedZone", time.FixedZone)
	_register("time.Friday", time.Friday)
	_register("time.Hour", time.Hour)
	_register("time.January", time.January)
	_register("time.July", time.July)
	_register("time.June", time.June)
	_register("time.Kitchen", time.Kitchen)
	_register("time.Layout", time.Layout)
	_register("time.LoadLocation", time.LoadLocation)
	_register("time.LoadLocationFromTZData", time.LoadLocationFromTZData)
	_register("time.Local", time.Local)
	_register("time.Location", reflect.TypeOf((*time.Location)(nil)).Elem())
	_register("time.March", time.March)
	_register("time.May", time.May)
	_register("time.Microsecond", time.Microsecond)
	_register("time.Millisecond", time.Millisecond)
	_register("time.Minute", time.Minute)
	_register("time.Monday", time.Monday)
	_register("time.Month", reflect.TypeOf((*time.Month)(nil)).Elem())
	_register("time.Nanosecond", time.Nanosecond)
	_register("time.NewTicker", time.NewTicker)
	_register("time.NewTimer", time.NewTimer)
	_register("time.November", time.November)
	_register("time.Now", time.Now)
	_register("time.October", time.October)
	_register("time.Parse", time.Parse)
	_register("time.ParseDuration", time.ParseDuration)
	_register("time.ParseError", reflect.TypeOf((*time.ParseError)(nil)).Elem())
	_register("time.ParseInLocation", time.ParseInLocation)
	_register("time.RFC1123", time.RFC1123)
	_register("time.RFC1123Z", time.RFC1123Z)
	_register("time.RFC3339", time.RFC3339)
	_register("time.RFC3339Nano", time.RFC3339Nano)
	_register("time.RFC822", time.RFC822)
	_register("time.RFC822Z", time.RFC822Z)
	_register("time.RFC850", time.RFC850)
	_register("time.RubyDate", time.RubyDate)
	_register("time.Saturday", time.Saturday)
	_register("time.Second", time.Second)
	_register("time.September", time.September)
	_register("time.Since", time.Since)
	_register("time.Sleep", time.Sleep)
	_register("time.Stamp", time.Stamp)
	_register("time.StampMicro", time.StampMicro)
	_register("time.StampMilli", time.StampMilli)
	_register("time.StampNano", time.StampNano)
	_register("time.Sunday", time.Sunday)
	_register("time.Thursday", time.Thursday)
	_register("time.Tick", time.Tick)
	_register("time.Ticker", reflect.TypeOf((*time.Ticker)(nil)).Elem())
	_register("time.Time", reflect.TypeOf((*time.Time)(nil)).Elem())
	_register("time.Timer", reflect.TypeOf((*time.Timer)(nil)).Elem())
	_register("time.Tuesday", time.Tuesday)
	_register("time.UTC", time.UTC)
	_register("time.Unix", time.Unix)
	_register("time.UnixDate", time.UnixDate)
	_register("time.UnixMicro", time.UnixMicro)
	_register("time.UnixMilli", time.UnixMilli)
	_register("time.Until", time.Until)
	_register("time.Wednesday", time.Wednesday)
	_register("time.Weekday", reflect.TypeOf((*time.Weekday)(nil)).Elem())

	// package unicode
	////////////////////////////////////////
	_register("unicode.ASCII_Hex_Digit", unicode.ASCII_Hex_Digit)
	_register("unicode.Adlam", unicode.Adlam)
	_register("unicode.Ahom", unicode.Ahom)
	_register("unicode.Anatolian_Hieroglyphs", unicode.Anatolian_Hieroglyphs)
	_register("unicode.Arabic", unicode.Arabic)
	_register("unicode.Armenian", unicode.Armenian)
	_register("unicode.Avestan", unicode.Avestan)
	_register("unicode.AzeriCase", unicode.AzeriCase)
	_register("unicode.Balinese", unicode.Balinese)
	_register("unicode.Bamum", unicode.Bamum)
	_register("unicode.Bassa_Vah", unicode.Bassa_Vah)
	_register("unicode.Batak", unicode.Batak)
	_register("unicode.Bengali", unicode.Bengali)
	_register("unicode.Bhaiksuki", unicode.Bhaiksuki)
	_register("unicode.Bidi_Control", unicode.Bidi_Control)
	_register("unicode.Bopomofo", unicode.Bopomofo)
	_register("unicode.Brahmi", unicode.Brahmi)
	_register("unicode.Braille", unicode.Braille)
	_register("unicode.Buginese", unicode.Buginese)
	_register("unicode.Buhid", unicode.Buhid)
	_register("unicode.C", unicode.C)
	_register("unicode.Canadian_Aboriginal", unicode.Canadian_Aboriginal)
	_register("unicode.Carian", unicode.Carian)
	_register("unicode.CaseRange", reflect.TypeOf((*unicode.CaseRange)(nil)).Elem())
	_register("unicode.CaseRanges", unicode.CaseRanges)
	_register("unicode.Categories", unicode.Categories)
	_register("unicode.Caucasian_Albanian", unicode.Caucasian_Albanian)
	_register("unicode.Cc", unicode.Cc)
	_register("unicode.Cf", unicode.Cf)
	_register("unicode.Chakma", unicode.Chakma)
	_register("unicode.Cham", unicode.Cham)
	_register("unicode.Cherokee", unicode.Cherokee)
	_register("unicode.Chorasmian", unicode.Chorasmian)
	_register("unicode.Co", unicode.Co)
	_register("unicode.Common", unicode.Common)
	_register("unicode.Coptic", unicode.Coptic)
	_register("unicode.Cs", unicode.Cs)
	_register("unicode.Cuneiform", unicode.Cuneiform)
	_register("unicode.Cypriot", unicode.Cypriot)
	_register("unicode.Cyrillic", unicode.Cyrillic)
	_register("unicode.Dash", unicode.Dash)
	_register("unicode.Deprecated", unicode.Deprecated)
	_register("unicode.Deseret", unicode.Deseret)
	_register("unicode.Devanagari", unicode.Devanagari)
	_register("unicode.Diacritic", unicode.Diacritic)
	_register("unicode.Digit", unicode.Digit)
	_register("unicode.Dives_Akuru", unicode.Dives_Akuru)
	_register("unicode.Dogra", unicode.Dogra)
	_register("unicode.Duployan", unicode.Duployan)
	_register("unicode.Egyptian_Hieroglyphs", unicode.Egyptian_Hieroglyphs)
	_register("unicode.Elbasan", unicode.Elbasan)
	_register("unicode.Elymaic", unicode.Elymaic)
	_register("unicode.Ethiopic", unicode.Ethiopic)
	_register("unicode.Extender", unicode.Extender)
	_register("unicode.FoldCategory", unicode.FoldCategory)
	_register("unicode.FoldScript", unicode.FoldScript)
	_register("unicode.Georgian", unicode.Georgian)
	_register("unicode.Glagolitic", unicode.Glagolitic)
	_register("unicode.Gothic", unicode.Gothic)
	_register("unicode.Grantha", unicode.Grantha)
	_register("unicode.GraphicRanges", unicode.GraphicRanges)
	_register("unicode.Greek", unicode.Greek)
	_register("unicode.Gujarati", unicode.Gujarati)
	_register("unicode.Gunjala_Gondi", unicode.Gunjala_Gondi)
	_register("unicode.Gurmukhi", unicode.Gurmukhi)
	_register("unicode.Han", unicode.Han)
	_register("unicode.Hangul", unicode.Hangul)
	_register("unicode.Hanifi_Rohingya", unicode.Hanifi_Rohingya)
	_register("unicode.Hanunoo", unicode.Hanunoo)
	_register("unicode.Hatran", unicode.Hatran)
	_register("unicode.Hebrew", unicode.Hebrew)
	_register("unicode.Hex_Digit", unicode.Hex_Digit)
	_register("unicode.Hiragana", unicode.Hiragana)
	_register("unicode.Hyphen", unicode.Hyphen)
	_register("unicode.IDS_Binary_Operator", unicode.IDS_Binary_Operator)
	_register("unicode.IDS_Trinary_Operator", unicode.IDS_Trinary_Operator)
	_register("unicode.Ideographic", unicode.Ideographic)
	_register("unicode.Imperial_Aramaic", unicode.Imperial_Aramaic)
	_register("unicode.In", unicode.In)
	_register("unicode.Inherited", unicode.Inherited)
	_register("unicode.Inscriptional_Pahlavi", unicode.Inscriptional_Pahlavi)
	_register("unicode.Inscriptional_Parthian", unicode.Inscriptional_Parthian)
	_register("unicode.Is", unicode.Is)
	_register("unicode.IsControl", unicode.IsControl)
	_register("unicode.IsDigit", unicode.IsDigit)
	_register("unicode.IsGraphic", unicode.IsGraphic)
	_register("unicode.IsLetter", unicode.IsLetter)
	_register("unicode.IsLower", unicode.IsLower)
	_register("unicode.IsMark", unicode.IsMark)
	_register("unicode.IsNumber", unicode.IsNumber)
	_register("unicode.IsOneOf", unicode.IsOneOf)
	_register("unicode.IsPrint", unicode.IsPrint)
	_register("unicode.IsPunct", unicode.IsPunct)
	_register("unicode.IsSpace", unicode.IsSpace)
	_register("unicode.IsSymbol", unicode.IsSymbol)
	_register("unicode.IsTitle", unicode.IsTitle)
	_register("unicode.IsUpper", unicode.IsUpper)
	_register("unicode.Javanese", unicode.Javanese)
	_register("unicode.Join_Control", unicode.Join_Control)
	_register("unicode.Kaithi", unicode.Kaithi)
	_register("unicode.Kannada", unicode.Kannada)
	_register("unicode.Katakana", unicode.Katakana)
	_register("unicode.Kayah_Li", unicode.Kayah_Li)
	_register("unicode.Kharoshthi", unicode.Kharoshthi)
	_register("unicode.Khitan_Small_Script", unicode.Khitan_Small_Script)
	_register("unicode.Khmer", unicode.Khmer)
	_register("unicode.Khojki", unicode.Khojki)
	_register("unicode.Khudawadi", unicode.Khudawadi)
	_register("unicode.L", unicode.L)
	_register("unicode.Lao", unicode.Lao)
	_register("unicode.Latin", unicode.Latin)
	_register("unicode.Lepcha", unicode.Lepcha)
	_register("unicode.Letter", unicode.Letter)
	_register("unicode.Limbu", unicode.Limbu)
	_register("unicode.Linear_A", unicode.Linear_A)
	_register("unicode.Linear_B", unicode.Linear_B)
	_register("unicode.Lisu", unicode.Lisu)
	_register("unicode.Ll", unicode.Ll)
	_register("unicode.Lm", unicode.Lm)
	_register("unicode.Lo", unicode.Lo)
	_register("unicode.Logical_Order_Exception", unicode.Logical_Order_Exception)
	_register("unicode.Lower", unicode.Lower)
	_register("unicode.LowerCase", unicode.LowerCase)
	_register("unicode.Lt", unicode.Lt)
	_register("unicode.Lu", unicode.Lu)
	_register("unicode.Lycian", unicode.Lycian)
	_register("unicode.Lydian", unicode.Lydian)
	_register("unicode.M", unicode.M)
	_register("unicode.Mahajani", unicode.Mahajani)
	_register("unicode.Makasar", unicode.Makasar)
	_register("unicode.Malayalam", unicode.Malayalam)
	_register("unicode.Mandaic", unicode.Mandaic)
	_register("unicode.Manichaean", unicode.Manichaean)
	_register("unicode.Marchen", unicode.Marchen)
	_register("unicode.Mark", unicode.Mark)
	_register("unicode.Masaram_Gondi", unicode.Masaram_Gondi)
	_register("unicode.MaxASCII", unicode.MaxASCII)
	_register("unicode.MaxCase", unicode.MaxCase)
	_register("unicode.MaxLatin1", unicode.MaxLatin1)
	_register("unicode.MaxRune", unicode.MaxRune)
	_register("unicode.Mc", unicode.Mc)
	_register("unicode.Me", unicode.Me)
	_register("unicode.Medefaidrin", unicode.Medefaidrin)
	_register("unicode.Meetei_Mayek", unicode.Meetei_Mayek)
	_register("unicode.Mende_Kikakui", unicode.Mende_Kikakui)
	_register("unicode.Meroitic_Cursive", unicode.Meroitic_Cursive)
	_register("unicode.Meroitic_Hieroglyphs", unicode.Meroitic_Hieroglyphs)
	_register("unicode.Miao", unicode.Miao)
	_register("unicode.Mn", unicode.Mn)
	_register("unicode.Modi", unicode.Modi)
	_register("unicode.Mongolian", unicode.Mongolian)
	_register("unicode.Mro", unicode.Mro)
	_register("unicode.Multani", unicode.Multani)
	_register("unicode.Myanmar", unicode.Myanmar)
	_register("unicode.N", unicode.N)
	_register("unicode.Nabataean", unicode.Nabataean)
	_register("unicode.Nandinagari", unicode.Nandinagari)
	_register("unicode.Nd", unicode.Nd)
	_register("unicode.New_Tai_Lue", unicode.New_Tai_Lue)
	_register("unicode.Newa", unicode.Newa)
	_register("unicode.Nko", unicode.Nko)
	_register("unicode.Nl", unicode.Nl)
	_register("unicode.No", unicode.No)
	_register("unicode.Noncharacter_Code_Point", unicode.Noncharacter_Code_Point)
	_register("unicode.Number", unicode.Number)
	_register("unicode.Nushu", unicode.Nushu)
	_register("unicode.Nyiakeng_Puachue_Hmong", unicode.Nyiakeng_Puachue_Hmong)
	_register("unicode.Ogham", unicode.Ogham)
	_register("unicode.Ol_Chiki", unicode.Ol_Chiki)
	_register("unicode.Old_Hungarian", unicode.Old_Hungarian)
	_register("unicode.Old_Italic", unicode.Old_Italic)
	_register("unicode.Old_North_Arabian", unicode.Old_North_Arabian)
	_register("unicode.Old_Permic", unicode.Old_Permic)
	_register("unicode.Old_Persian", unicode.Old_Persian)
	_register("unicode.Old_Sogdian", unicode.Old_Sogdian)
	_register("unicode.Old_South_Arabian", unicode.Old_South_Arabian)
	_register("unicode.Old_Turkic", unicode.Old_Turkic)
	_register("unicode.Oriya", unicode.Oriya)
	_register("unicode.Osage", unicode.Osage)
	_register("unicode.Osmanya", unicode.Osmanya)
	_register("unicode.Other", unicode.Other)
	_register("unicode.Other_Alphabetic", unicode.Other_Alphabetic)
	_register("unicode.Other_Default_Ignorable_Code_Point", unicode.Other_Default_Ignorable_Code_Point)
	_register("unicode.Other_Grapheme_Extend", unicode.Other_Grapheme_Extend)
	_register("unicode.Other_ID_Continue", unicode.Other_ID_Continue)
	_register("unicode.Other_ID_Start", unicode.Other_ID_Start)
	_register("unicode.Other_Lowercase", unicode.Other_Lowercase)
	_register("unicode.Other_Math", unicode.Other_Math)
	_register("unicode.Other_Uppercase", unicode.Other_Uppercase)
	_register("unicode.P", unicode.P)
	_register("unicode.Pahawh_Hmong", unicode.Pahawh_Hmong)
	_register("unicode.Palmyrene", unicode.Palmyrene)
	_register("unicode.Pattern_Syntax", unicode.Pattern_Syntax)
	_register("unicode.Pattern_White_Space", unicode.Pattern_White_Space)
	_register("unicode.Pau_Cin_Hau", unicode.Pau_Cin_Hau)
	_register("unicode.Pc", unicode.Pc)
	_register("unicode.Pd", unicode.Pd)
	_register("unicode.Pe", unicode.Pe)
	_register("unicode.Pf", unicode.Pf)
	_register("unicode.Phags_Pa", unicode.Phags_Pa)
	_register("unicode.Phoenician", unicode.Phoenician)
	_register("unicode.Pi", unicode.Pi)
	_register("unicode.Po", unicode.Po)
	_register("unicode.Prepended_Concatenation_Mark", unicode.Prepended_Concatenation_Mark)
	_register("unicode.PrintRanges", unicode.PrintRanges)
	_register("unicode.Properties", unicode.Properties)
	_register("unicode.Ps", unicode.Ps)
	_register("unicode.Psalter_Pahlavi", unicode.Psalter_Pahlavi)
	_register("unicode.Punct", unicode.Punct)
	_register("unicode.Quotation_Mark", unicode.Quotation_Mark)
	_register("unicode.Radical", unicode.Radical)
	_register("unicode.Range16", reflect.TypeOf((*unicode.Range16)(nil)).Elem())
	_register("unicode.Range32", reflect.TypeOf((*unicode.Range32)(nil)).Elem())
	_register("unicode.RangeTable", reflect.TypeOf((*unicode.RangeTable)(nil)).Elem())
	_register("unicode.Regional_Indicator", unicode.Regional_Indicator)
	_register("unicode.Rejang", unicode.Rejang)
	_register("unicode.ReplacementChar", unicode.ReplacementChar)
	_register("unicode.Runic", unicode.Runic)
	_register("unicode.S", unicode.S)
	_register("unicode.STerm", unicode.STerm)
	_register("unicode.Samaritan", unicode.Samaritan)
	_register("unicode.Saurashtra", unicode.Saurashtra)
	_register("unicode.Sc", unicode.Sc)
	_register("unicode.Scripts", unicode.Scripts)
	_register("unicode.Sentence_Terminal", unicode.Sentence_Terminal)
	_register("unicode.Sharada", unicode.Sharada)
	_register("unicode.Shavian", unicode.Shavian)
	_register("unicode.Siddham", unicode.Siddham)
	_register("unicode.SignWriting", unicode.SignWriting)
	_register("unicode.SimpleFold", unicode.SimpleFold)
	_register("unicode.Sinhala", unicode.Sinhala)
	_register("unicode.Sk", unicode.Sk)
	_register("unicode.Sm", unicode.Sm)
	_register("unicode.So", unicode.So)
	_register("unicode.Soft_Dotted", unicode.Soft_Dotted)
	_register("unicode.Sogdian", unicode.Sogdian)
	_register("unicode.Sora_Sompeng", unicode.Sora_Sompeng)
	_register("unicode.Soyombo", unicode.Soyombo)
	_register("unicode.Space", unicode.Space)
	_register("unicode.SpecialCase", reflect.TypeOf((*unicode.SpecialCase)(nil)).Elem())
	_register("unicode.Sundanese", unicode.Sundanese)
	_register("unicode.Syloti_Nagri", unicode.Syloti_Nagri)
	_register("unicode.Symbol", unicode.Symbol)
	_register("unicode.Syriac", unicode.Syriac)
	_register("unicode.Tagalog", unicode.Tagalog)
	_register("unicode.Tagbanwa", unicode.Tagbanwa)
	_register("unicode.Tai_Le", unicode.Tai_Le)
	_register("unicode.Tai_Tham", unicode.Tai_Tham)
	_register("unicode.Tai_Viet", unicode.Tai_Viet)
	_register("unicode.Takri", unicode.Takri)
	_register("unicode.Tamil", unicode.Tamil)
	_register("unicode.Tangut", unicode.Tangut)
	_register("unicode.Telugu", unicode.Telugu)
	_register("unicode.Terminal_Punctuation", unicode.Terminal_Punctuation)
	_register("unicode.Thaana", unicode.Thaana)
	_register("unicode.Thai", unicode.Thai)
	_register("unicode.Tibetan", unicode.Tibetan)
	_register("unicode.Tifinagh", unicode.Tifinagh)
	_register("unicode.Tirhuta", unicode.Tirhuta)
	_register("unicode.Title", unicode.Title)
	_register("unicode.TitleCase", unicode.TitleCase)
	_register("unicode.To", unicode.To)
	_register("unicode.ToLower", unicode.ToLower)
	_register("unicode.ToTitle", unicode.ToTitle)
	_register("unicode.ToUpper", unicode.ToUpper)
	_register("unicode.TurkishCase", unicode.TurkishCase)
	_register("unicode.Ugaritic", unicode.Ugaritic)
	_register("unicode.Unified_Ideograph", unicode.Unified_Ideograph)
	_register("unicode.Upper", unicode.Upper)
	_register("unicode.UpperCase", unicode.UpperCase)
	_register("unicode.UpperLower", unicode.UpperLower)
	_register("unicode.Vai", unicode.Vai)
	_register("unicode.Variation_Selector", unicode.Variation_Selector)
	_register("unicode.Version", unicode.Version)
	_register("unicode.Wancho", unicode.Wancho)
	_register("unicode.Warang_Citi", unicode.Warang_Citi)
	_register("unicode.White_Space", unicode.White_Space)
	_register("unicode.Yezidi", unicode.Yezidi)
	_register("unicode.Yi", unicode.Yi)
	_register("unicode.Z", unicode.Z)
	_register("unicode.Zanabazar_Square", unicode.Zanabazar_Square)
	_register("unicode.Zl", unicode.Zl)
	_register("unicode.Zp", unicode.Zp)
	_register("unicode.Zs", unicode.Zs)

	// package github.com/glojurelang/glojure/value
	////////////////////////////////////////
	_register("github.com/glojurelang/glojure/value.AddP", github_com_glojurelang_glojure_value.AddP)
	_register("github.com/glojurelang/glojure/value.Apply", github_com_glojurelang_glojure_value.Apply)
	_register("github.com/glojurelang/glojure/value.ArrayNode", reflect.TypeOf((*github_com_glojurelang_glojure_value.ArrayNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ArrayNodeIterator", reflect.TypeOf((*github_com_glojurelang_glojure_value.ArrayNodeIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ArrayNodeSeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.ArrayNodeSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.AsBigDecimal", github_com_glojurelang_glojure_value.AsBigDecimal)
	_register("github.com/glojurelang/glojure/value.AsBigInt", github_com_glojurelang_glojure_value.AsBigInt)
	_register("github.com/glojurelang/glojure/value.AsFloat64", github_com_glojurelang_glojure_value.AsFloat64)
	_register("github.com/glojurelang/glojure/value.AsInt", github_com_glojurelang_glojure_value.AsInt)
	_register("github.com/glojurelang/glojure/value.AsInt64", github_com_glojurelang_glojure_value.AsInt64)
	_register("github.com/glojurelang/glojure/value.AsNumber", github_com_glojurelang_glojure_value.AsNumber)
	_register("github.com/glojurelang/glojure/value.AsRatio", github_com_glojurelang_glojure_value.AsRatio)
	_register("github.com/glojurelang/glojure/value.Assoc", github_com_glojurelang_glojure_value.Assoc)
	_register("github.com/glojurelang/glojure/value.Associative", reflect.TypeOf((*github_com_glojurelang_glojure_value.Associative)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Atom", reflect.TypeOf((*github_com_glojurelang_glojure_value.Atom)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.BigDecimal", reflect.TypeOf((*github_com_glojurelang_glojure_value.BigDecimal)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.BigInt", reflect.TypeOf((*github_com_glojurelang_glojure_value.BigInt)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.BitmapIndexedNode", reflect.TypeOf((*github_com_glojurelang_glojure_value.BitmapIndexedNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.BooleanCast", github_com_glojurelang_glojure_value.BooleanCast)
	_register("github.com/glojurelang/glojure/value.Box", reflect.TypeOf((*github_com_glojurelang_glojure_value.Box)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Char", reflect.TypeOf((*github_com_glojurelang_glojure_value.Char)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.CharLiteralFromRune", github_com_glojurelang_glojure_value.CharLiteralFromRune)
	_register("github.com/glojurelang/glojure/value.Comparer", reflect.TypeOf((*github_com_glojurelang_glojure_value.Comparer)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ConcatStrings", github_com_glojurelang_glojure_value.ConcatStrings)
	_register("github.com/glojurelang/glojure/value.Conj", github_com_glojurelang_glojure_value.Conj)
	_register("github.com/glojurelang/glojure/value.Conjer", reflect.TypeOf((*github_com_glojurelang_glojure_value.Conjer)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Cons", reflect.TypeOf((*github_com_glojurelang_glojure_value.Cons)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ConsList", github_com_glojurelang_glojure_value.ConsList)
	_register("github.com/glojurelang/glojure/value.ConstructPersistentStructMap", github_com_glojurelang_glojure_value.ConstructPersistentStructMap)
	_register("github.com/glojurelang/glojure/value.ConvertToGo", github_com_glojurelang_glojure_value.ConvertToGo)
	_register("github.com/glojurelang/glojure/value.Count", github_com_glojurelang_glojure_value.Count)
	_register("github.com/glojurelang/glojure/value.Counted", reflect.TypeOf((*github_com_glojurelang_glojure_value.Counted)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.CreatePersistentHashMap", github_com_glojurelang_glojure_value.CreatePersistentHashMap)
	_register("github.com/glojurelang/glojure/value.CreatePersistentStructMapSlotMap", github_com_glojurelang_glojure_value.CreatePersistentStructMapSlotMap)
	_register("github.com/glojurelang/glojure/value.CreatePersistentTreeMap", github_com_glojurelang_glojure_value.CreatePersistentTreeMap)
	_register("github.com/glojurelang/glojure/value.Dissoc", github_com_glojurelang_glojure_value.Dissoc)
	_register("github.com/glojurelang/glojure/value.EmptyList", reflect.TypeOf((*github_com_glojurelang_glojure_value.EmptyList)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.EmptyMapIterator", reflect.TypeOf((*github_com_glojurelang_glojure_value.EmptyMapIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Environment", reflect.TypeOf((*github_com_glojurelang_glojure_value.Environment)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Equal", github_com_glojurelang_glojure_value.Equal)
	_register("github.com/glojurelang/glojure/value.Equaler", reflect.TypeOf((*github_com_glojurelang_glojure_value.Equaler)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ErrNoTransaction", github_com_glojurelang_glojure_value.ErrNoTransaction)
	_register("github.com/glojurelang/glojure/value.Error", reflect.TypeOf((*github_com_glojurelang_glojure_value.Error)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.FieldOrMethod", github_com_glojurelang_glojure_value.FieldOrMethod)
	_register("github.com/glojurelang/glojure/value.FindNamespace", github_com_glojurelang_glojure_value.FindNamespace)
	_register("github.com/glojurelang/glojure/value.FindOrCreateNamespace", github_com_glojurelang_glojure_value.FindOrCreateNamespace)
	_register("github.com/glojurelang/glojure/value.First", github_com_glojurelang_glojure_value.First)
	_register("github.com/glojurelang/glojure/value.Fn", reflect.TypeOf((*github_com_glojurelang_glojure_value.Fn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Get", github_com_glojurelang_glojure_value.Get)
	_register("github.com/glojurelang/glojure/value.GetDefault", github_com_glojurelang_glojure_value.GetDefault)
	_register("github.com/glojurelang/glojure/value.GlobalEnv", github_com_glojurelang_glojure_value.GlobalEnv)
	_register("github.com/glojurelang/glojure/value.Hash", github_com_glojurelang_glojure_value.Hash)
	_register("github.com/glojurelang/glojure/value.HashCollisionNode", reflect.TypeOf((*github_com_glojurelang_glojure_value.HashCollisionNode)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Hasher", reflect.TypeOf((*github_com_glojurelang_glojure_value.Hasher)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IAtom", reflect.TypeOf((*github_com_glojurelang_glojure_value.IAtom)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IAtom2", reflect.TypeOf((*github_com_glojurelang_glojure_value.IAtom2)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IChunk", reflect.TypeOf((*github_com_glojurelang_glojure_value.IChunk)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IChunkedSeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.IChunkedSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IDeref", reflect.TypeOf((*github_com_glojurelang_glojure_value.IDeref)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IDrop", reflect.TypeOf((*github_com_glojurelang_glojure_value.IDrop)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IEditableCollection", reflect.TypeOf((*github_com_glojurelang_glojure_value.IEditableCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IFn", reflect.TypeOf((*github_com_glojurelang_glojure_value.IFn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IFnFunc", reflect.TypeOf((*github_com_glojurelang_glojure_value.IFnFunc)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IHashEq", reflect.TypeOf((*github_com_glojurelang_glojure_value.IHashEq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ILookup", reflect.TypeOf((*github_com_glojurelang_glojure_value.ILookup)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IMapEntry", reflect.TypeOf((*github_com_glojurelang_glojure_value.IMapEntry)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IMeta", reflect.TypeOf((*github_com_glojurelang_glojure_value.IMeta)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IObj", reflect.TypeOf((*github_com_glojurelang_glojure_value.IObj)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPending", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPending)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentCollection", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentList", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentList)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentMap", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentSet", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentStack", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentStack)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IPersistentVector", reflect.TypeOf((*github_com_glojurelang_glojure_value.IPersistentVector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IRecord", reflect.TypeOf((*github_com_glojurelang_glojure_value.IRecord)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IReduce", reflect.TypeOf((*github_com_glojurelang_glojure_value.IReduce)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IReduceInit", reflect.TypeOf((*github_com_glojurelang_glojure_value.IReduceInit)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.IRef", reflect.TypeOf((*github_com_glojurelang_glojure_value.IRef)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ISeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.ISeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ISeqable", reflect.TypeOf((*github_com_glojurelang_glojure_value.ISeqable)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ITransientCollection", reflect.TypeOf((*github_com_glojurelang_glojure_value.ITransientCollection)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.ITransientSet", reflect.TypeOf((*github_com_glojurelang_glojure_value.ITransientSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Identical", github_com_glojurelang_glojure_value.Identical)
	_register("github.com/glojurelang/glojure/value.IdentityHash", github_com_glojurelang_glojure_value.IdentityHash)
	_register("github.com/glojurelang/glojure/value.Inc", github_com_glojurelang_glojure_value.Inc)
	_register("github.com/glojurelang/glojure/value.IncP", github_com_glojurelang_glojure_value.IncP)
	_register("github.com/glojurelang/glojure/value.Indexed", reflect.TypeOf((*github_com_glojurelang_glojure_value.Indexed)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.InternKeyword", github_com_glojurelang_glojure_value.InternKeyword)
	_register("github.com/glojurelang/glojure/value.InternKeywordString", github_com_glojurelang_glojure_value.InternKeywordString)
	_register("github.com/glojurelang/glojure/value.InternKeywordSymbol", github_com_glojurelang_glojure_value.InternKeywordSymbol)
	_register("github.com/glojurelang/glojure/value.InternSymbol", github_com_glojurelang_glojure_value.InternSymbol)
	_register("github.com/glojurelang/glojure/value.InternVar", github_com_glojurelang_glojure_value.InternVar)
	_register("github.com/glojurelang/glojure/value.InternVarName", github_com_glojurelang_glojure_value.InternVarName)
	_register("github.com/glojurelang/glojure/value.InternVarReplaceRoot", github_com_glojurelang_glojure_value.InternVarReplaceRoot)
	_register("github.com/glojurelang/glojure/value.IsInteger", github_com_glojurelang_glojure_value.IsInteger)
	_register("github.com/glojurelang/glojure/value.IsNil", github_com_glojurelang_glojure_value.IsNil)
	_register("github.com/glojurelang/glojure/value.IsReduced", github_com_glojurelang_glojure_value.IsReduced)
	_register("github.com/glojurelang/glojure/value.IsSeq", github_com_glojurelang_glojure_value.IsSeq)
	_register("github.com/glojurelang/glojure/value.IsSeqEqual", github_com_glojurelang_glojure_value.IsSeqEqual)
	_register("github.com/glojurelang/glojure/value.IsTruthy", github_com_glojurelang_glojure_value.IsTruthy)
	_register("github.com/glojurelang/glojure/value.KWAliases", github_com_glojurelang_glojure_value.KWAliases)
	_register("github.com/glojurelang/glojure/value.KWArg", github_com_glojurelang_glojure_value.KWArg)
	_register("github.com/glojurelang/glojure/value.KWArgId", github_com_glojurelang_glojure_value.KWArgId)
	_register("github.com/glojurelang/glojure/value.KWArglists", github_com_glojurelang_glojure_value.KWArglists)
	_register("github.com/glojurelang/glojure/value.KWArgs", github_com_glojurelang_glojure_value.KWArgs)
	_register("github.com/glojurelang/glojure/value.KWBinding", github_com_glojurelang_glojure_value.KWBinding)
	_register("github.com/glojurelang/glojure/value.KWBindings", github_com_glojurelang_glojure_value.KWBindings)
	_register("github.com/glojurelang/glojure/value.KWBody", github_com_glojurelang_glojure_value.KWBody)
	_register("github.com/glojurelang/glojure/value.KWBool", github_com_glojurelang_glojure_value.KWBool)
	_register("github.com/glojurelang/glojure/value.KWCase", github_com_glojurelang_glojure_value.KWCase)
	_register("github.com/glojurelang/glojure/value.KWCaseNode", github_com_glojurelang_glojure_value.KWCaseNode)
	_register("github.com/glojurelang/glojure/value.KWCatch", github_com_glojurelang_glojure_value.KWCatch)
	_register("github.com/glojurelang/glojure/value.KWCatches", github_com_glojurelang_glojure_value.KWCatches)
	_register("github.com/glojurelang/glojure/value.KWChar", github_com_glojurelang_glojure_value.KWChar)
	_register("github.com/glojurelang/glojure/value.KWChildren", github_com_glojurelang_glojure_value.KWChildren)
	_register("github.com/glojurelang/glojure/value.KWClass", github_com_glojurelang_glojure_value.KWClass)
	_register("github.com/glojurelang/glojure/value.KWColumn", github_com_glojurelang_glojure_value.KWColumn)
	_register("github.com/glojurelang/glojure/value.KWCompact", github_com_glojurelang_glojure_value.KWCompact)
	_register("github.com/glojurelang/glojure/value.KWConst", github_com_glojurelang_glojure_value.KWConst)
	_register("github.com/glojurelang/glojure/value.KWContext", github_com_glojurelang_glojure_value.KWContext)
	_register("github.com/glojurelang/glojure/value.KWCtxExpr", github_com_glojurelang_glojure_value.KWCtxExpr)
	_register("github.com/glojurelang/glojure/value.KWCtxReturn", github_com_glojurelang_glojure_value.KWCtxReturn)
	_register("github.com/glojurelang/glojure/value.KWCtxStatement", github_com_glojurelang_glojure_value.KWCtxStatement)
	_register("github.com/glojurelang/glojure/value.KWDef", github_com_glojurelang_glojure_value.KWDef)
	_register("github.com/glojurelang/glojure/value.KWDefault", github_com_glojurelang_glojure_value.KWDefault)
	_register("github.com/glojurelang/glojure/value.KWDo", github_com_glojurelang_glojure_value.KWDo)
	_register("github.com/glojurelang/glojure/value.KWDoc", github_com_glojurelang_glojure_value.KWDoc)
	_register("github.com/glojurelang/glojure/value.KWDynamic", github_com_glojurelang_glojure_value.KWDynamic)
	_register("github.com/glojurelang/glojure/value.KWElse", github_com_glojurelang_glojure_value.KWElse)
	_register("github.com/glojurelang/glojure/value.KWEndColumn", github_com_glojurelang_glojure_value.KWEndColumn)
	_register("github.com/glojurelang/glojure/value.KWEndLine", github_com_glojurelang_glojure_value.KWEndLine)
	_register("github.com/glojurelang/glojure/value.KWEnv", github_com_glojurelang_glojure_value.KWEnv)
	_register("github.com/glojurelang/glojure/value.KWException", github_com_glojurelang_glojure_value.KWException)
	_register("github.com/glojurelang/glojure/value.KWExpr", github_com_glojurelang_glojure_value.KWExpr)
	_register("github.com/glojurelang/glojure/value.KWExprs", github_com_glojurelang_glojure_value.KWExprs)
	_register("github.com/glojurelang/glojure/value.KWField", github_com_glojurelang_glojure_value.KWField)
	_register("github.com/glojurelang/glojure/value.KWFile", github_com_glojurelang_glojure_value.KWFile)
	_register("github.com/glojurelang/glojure/value.KWFinally", github_com_glojurelang_glojure_value.KWFinally)
	_register("github.com/glojurelang/glojure/value.KWFixedArity", github_com_glojurelang_glojure_value.KWFixedArity)
	_register("github.com/glojurelang/glojure/value.KWFn", github_com_glojurelang_glojure_value.KWFn)
	_register("github.com/glojurelang/glojure/value.KWFnMethod", github_com_glojurelang_glojure_value.KWFnMethod)
	_register("github.com/glojurelang/glojure/value.KWForm", github_com_glojurelang_glojure_value.KWForm)
	_register("github.com/glojurelang/glojure/value.KWHashEquiv", github_com_glojurelang_glojure_value.KWHashEquiv)
	_register("github.com/glojurelang/glojure/value.KWHashIdentity", github_com_glojurelang_glojure_value.KWHashIdentity)
	_register("github.com/glojurelang/glojure/value.KWHostCall", github_com_glojurelang_glojure_value.KWHostCall)
	_register("github.com/glojurelang/glojure/value.KWHostField", github_com_glojurelang_glojure_value.KWHostField)
	_register("github.com/glojurelang/glojure/value.KWHostInterop", github_com_glojurelang_glojure_value.KWHostInterop)
	_register("github.com/glojurelang/glojure/value.KWIf", github_com_glojurelang_glojure_value.KWIf)
	_register("github.com/glojurelang/glojure/value.KWInTry", github_com_glojurelang_glojure_value.KWInTry)
	_register("github.com/glojurelang/glojure/value.KWInit", github_com_glojurelang_glojure_value.KWInit)
	_register("github.com/glojurelang/glojure/value.KWInt", github_com_glojurelang_glojure_value.KWInt)
	_register("github.com/glojurelang/glojure/value.KWInvoke", github_com_glojurelang_glojure_value.KWInvoke)
	_register("github.com/glojurelang/glojure/value.KWIsAssignable", github_com_glojurelang_glojure_value.KWIsAssignable)
	_register("github.com/glojurelang/glojure/value.KWIsBody", github_com_glojurelang_glojure_value.KWIsBody)
	_register("github.com/glojurelang/glojure/value.KWIsLiteral", github_com_glojurelang_glojure_value.KWIsLiteral)
	_register("github.com/glojurelang/glojure/value.KWIsVariadic", github_com_glojurelang_glojure_value.KWIsVariadic)
	_register("github.com/glojurelang/glojure/value.KWItems", github_com_glojurelang_glojure_value.KWItems)
	_register("github.com/glojurelang/glojure/value.KWKeys", github_com_glojurelang_glojure_value.KWKeys)
	_register("github.com/glojurelang/glojure/value.KWKeyword", github_com_glojurelang_glojure_value.KWKeyword)
	_register("github.com/glojurelang/glojure/value.KWLet", github_com_glojurelang_glojure_value.KWLet)
	_register("github.com/glojurelang/glojure/value.KWLetfn", github_com_glojurelang_glojure_value.KWLetfn)
	_register("github.com/glojurelang/glojure/value.KWLine", github_com_glojurelang_glojure_value.KWLine)
	_register("github.com/glojurelang/glojure/value.KWLocal", github_com_glojurelang_glojure_value.KWLocal)
	_register("github.com/glojurelang/glojure/value.KWLocals", github_com_glojurelang_glojure_value.KWLocals)
	_register("github.com/glojurelang/glojure/value.KWLoop", github_com_glojurelang_glojure_value.KWLoop)
	_register("github.com/glojurelang/glojure/value.KWLoopId", github_com_glojurelang_glojure_value.KWLoopId)
	_register("github.com/glojurelang/glojure/value.KWLoopLocals", github_com_glojurelang_glojure_value.KWLoopLocals)
	_register("github.com/glojurelang/glojure/value.KWMOrF", github_com_glojurelang_glojure_value.KWMOrF)
	_register("github.com/glojurelang/glojure/value.KWMacro", github_com_glojurelang_glojure_value.KWMacro)
	_register("github.com/glojurelang/glojure/value.KWMap", github_com_glojurelang_glojure_value.KWMap)
	_register("github.com/glojurelang/glojure/value.KWMappings", github_com_glojurelang_glojure_value.KWMappings)
	_register("github.com/glojurelang/glojure/value.KWMaxFixedArity", github_com_glojurelang_glojure_value.KWMaxFixedArity)
	_register("github.com/glojurelang/glojure/value.KWMaybeClass", github_com_glojurelang_glojure_value.KWMaybeClass)
	_register("github.com/glojurelang/glojure/value.KWMaybeHostForm", github_com_glojurelang_glojure_value.KWMaybeHostForm)
	_register("github.com/glojurelang/glojure/value.KWMeta", github_com_glojurelang_glojure_value.KWMeta)
	_register("github.com/glojurelang/glojure/value.KWMethod", github_com_glojurelang_glojure_value.KWMethod)
	_register("github.com/glojurelang/glojure/value.KWMethods", github_com_glojurelang_glojure_value.KWMethods)
	_register("github.com/glojurelang/glojure/value.KWMutable", github_com_glojurelang_glojure_value.KWMutable)
	_register("github.com/glojurelang/glojure/value.KWNS", github_com_glojurelang_glojure_value.KWNS)
	_register("github.com/glojurelang/glojure/value.KWName", github_com_glojurelang_glojure_value.KWName)
	_register("github.com/glojurelang/glojure/value.KWNamespaces", github_com_glojurelang_glojure_value.KWNamespaces)
	_register("github.com/glojurelang/glojure/value.KWNew", github_com_glojurelang_glojure_value.KWNew)
	_register("github.com/glojurelang/glojure/value.KWNil", github_com_glojurelang_glojure_value.KWNil)
	_register("github.com/glojurelang/glojure/value.KWNodes", github_com_glojurelang_glojure_value.KWNodes)
	_register("github.com/glojurelang/glojure/value.KWNumber", github_com_glojurelang_glojure_value.KWNumber)
	_register("github.com/glojurelang/glojure/value.KWOnce", github_com_glojurelang_glojure_value.KWOnce)
	_register("github.com/glojurelang/glojure/value.KWOp", github_com_glojurelang_glojure_value.KWOp)
	_register("github.com/glojurelang/glojure/value.KWParams", github_com_glojurelang_glojure_value.KWParams)
	_register("github.com/glojurelang/glojure/value.KWPrivate", github_com_glojurelang_glojure_value.KWPrivate)
	_register("github.com/glojurelang/glojure/value.KWQuote", github_com_glojurelang_glojure_value.KWQuote)
	_register("github.com/glojurelang/glojure/value.KWRawForms", github_com_glojurelang_glojure_value.KWRawForms)
	_register("github.com/glojurelang/glojure/value.KWRecur", github_com_glojurelang_glojure_value.KWRecur)
	_register("github.com/glojurelang/glojure/value.KWRegex", github_com_glojurelang_glojure_value.KWRegex)
	_register("github.com/glojurelang/glojure/value.KWRet", github_com_glojurelang_glojure_value.KWRet)
	_register("github.com/glojurelang/glojure/value.KWSeq", github_com_glojurelang_glojure_value.KWSeq)
	_register("github.com/glojurelang/glojure/value.KWSet", github_com_glojurelang_glojure_value.KWSet)
	_register("github.com/glojurelang/glojure/value.KWSetBang", github_com_glojurelang_glojure_value.KWSetBang)
	_register("github.com/glojurelang/glojure/value.KWSparse", github_com_glojurelang_glojure_value.KWSparse)
	_register("github.com/glojurelang/glojure/value.KWStatements", github_com_glojurelang_glojure_value.KWStatements)
	_register("github.com/glojurelang/glojure/value.KWString", github_com_glojurelang_glojure_value.KWString)
	_register("github.com/glojurelang/glojure/value.KWSymbol", github_com_glojurelang_glojure_value.KWSymbol)
	_register("github.com/glojurelang/glojure/value.KWTag", github_com_glojurelang_glojure_value.KWTag)
	_register("github.com/glojurelang/glojure/value.KWTarget", github_com_glojurelang_glojure_value.KWTarget)
	_register("github.com/glojurelang/glojure/value.KWTest", github_com_glojurelang_glojure_value.KWTest)
	_register("github.com/glojurelang/glojure/value.KWTests", github_com_glojurelang_glojure_value.KWTests)
	_register("github.com/glojurelang/glojure/value.KWTheVar", github_com_glojurelang_glojure_value.KWTheVar)
	_register("github.com/glojurelang/glojure/value.KWThen", github_com_glojurelang_glojure_value.KWThen)
	_register("github.com/glojurelang/glojure/value.KWThrow", github_com_glojurelang_glojure_value.KWThrow)
	_register("github.com/glojurelang/glojure/value.KWTopLevel", github_com_glojurelang_glojure_value.KWTopLevel)
	_register("github.com/glojurelang/glojure/value.KWTry", github_com_glojurelang_glojure_value.KWTry)
	_register("github.com/glojurelang/glojure/value.KWType", github_com_glojurelang_glojure_value.KWType)
	_register("github.com/glojurelang/glojure/value.KWUnknown", github_com_glojurelang_glojure_value.KWUnknown)
	_register("github.com/glojurelang/glojure/value.KWVal", github_com_glojurelang_glojure_value.KWVal)
	_register("github.com/glojurelang/glojure/value.KWVals", github_com_glojurelang_glojure_value.KWVals)
	_register("github.com/glojurelang/glojure/value.KWVar", github_com_glojurelang_glojure_value.KWVar)
	_register("github.com/glojurelang/glojure/value.KWVector", github_com_glojurelang_glojure_value.KWVector)
	_register("github.com/glojurelang/glojure/value.KWWithMeta", github_com_glojurelang_glojure_value.KWWithMeta)
	_register("github.com/glojurelang/glojure/value.Keys", github_com_glojurelang_glojure_value.Keys)
	_register("github.com/glojurelang/glojure/value.Keyword", reflect.TypeOf((*github_com_glojurelang_glojure_value.Keyword)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.LazySeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.LazySeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.List", reflect.TypeOf((*github_com_glojurelang_glojure_value.List)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.LockingTransaction", github_com_glojurelang_glojure_value.LockingTransaction)
	_register("github.com/glojurelang/glojure/value.LockingTransactor", reflect.TypeOf((*github_com_glojurelang_glojure_value.LockingTransactor)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Map", reflect.TypeOf((*github_com_glojurelang_glojure_value.Map)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MapEntry", reflect.TypeOf((*github_com_glojurelang_glojure_value.MapEntry)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MapIterator", reflect.TypeOf((*github_com_glojurelang_glojure_value.MapIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MapKeySeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.MapKeySeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MapSeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.MapSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MapValSeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.MapValSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Max", github_com_glojurelang_glojure_value.Max)
	_register("github.com/glojurelang/glojure/value.Merge", github_com_glojurelang_glojure_value.Merge)
	_register("github.com/glojurelang/glojure/value.Min", github_com_glojurelang_glojure_value.Min)
	_register("github.com/glojurelang/glojure/value.MultiFn", reflect.TypeOf((*github_com_glojurelang_glojure_value.MultiFn)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.MustNth", github_com_glojurelang_glojure_value.MustNth)
	_register("github.com/glojurelang/glojure/value.NSCore", github_com_glojurelang_glojure_value.NSCore)
	_register("github.com/glojurelang/glojure/value.Named", reflect.TypeOf((*github_com_glojurelang_glojure_value.Named)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Namespace", reflect.TypeOf((*github_com_glojurelang_glojure_value.Namespace)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.NamespaceFor", github_com_glojurelang_glojure_value.NamespaceFor)
	_register("github.com/glojurelang/glojure/value.Namespaces", github_com_glojurelang_glojure_value.Namespaces)
	_register("github.com/glojurelang/glojure/value.NewAtom", github_com_glojurelang_glojure_value.NewAtom)
	_register("github.com/glojurelang/glojure/value.NewBigDecimal", github_com_glojurelang_glojure_value.NewBigDecimal)
	_register("github.com/glojurelang/glojure/value.NewBigDecimalFromFloat64", github_com_glojurelang_glojure_value.NewBigDecimalFromFloat64)
	_register("github.com/glojurelang/glojure/value.NewBigInt", github_com_glojurelang_glojure_value.NewBigInt)
	_register("github.com/glojurelang/glojure/value.NewBigIntFromGoBigInt", github_com_glojurelang_glojure_value.NewBigIntFromGoBigInt)
	_register("github.com/glojurelang/glojure/value.NewBigIntFromInt64", github_com_glojurelang_glojure_value.NewBigIntFromInt64)
	_register("github.com/glojurelang/glojure/value.NewBox", github_com_glojurelang_glojure_value.NewBox)
	_register("github.com/glojurelang/glojure/value.NewChar", github_com_glojurelang_glojure_value.NewChar)
	_register("github.com/glojurelang/glojure/value.NewConcatIterator", github_com_glojurelang_glojure_value.NewConcatIterator)
	_register("github.com/glojurelang/glojure/value.NewCons", github_com_glojurelang_glojure_value.NewCons)
	_register("github.com/glojurelang/glojure/value.NewError", github_com_glojurelang_glojure_value.NewError)
	_register("github.com/glojurelang/glojure/value.NewFn", github_com_glojurelang_glojure_value.NewFn)
	_register("github.com/glojurelang/glojure/value.NewIterator", github_com_glojurelang_glojure_value.NewIterator)
	_register("github.com/glojurelang/glojure/value.NewKeyword", github_com_glojurelang_glojure_value.NewKeyword)
	_register("github.com/glojurelang/glojure/value.NewLazilyPersistentVector", github_com_glojurelang_glojure_value.NewLazilyPersistentVector)
	_register("github.com/glojurelang/glojure/value.NewLazySeq", github_com_glojurelang_glojure_value.NewLazySeq)
	_register("github.com/glojurelang/glojure/value.NewList", github_com_glojurelang_glojure_value.NewList)
	_register("github.com/glojurelang/glojure/value.NewMap", github_com_glojurelang_glojure_value.NewMap)
	_register("github.com/glojurelang/glojure/value.NewMapEntry", github_com_glojurelang_glojure_value.NewMapEntry)
	_register("github.com/glojurelang/glojure/value.NewMapKeySeq", github_com_glojurelang_glojure_value.NewMapKeySeq)
	_register("github.com/glojurelang/glojure/value.NewMapSeq", github_com_glojurelang_glojure_value.NewMapSeq)
	_register("github.com/glojurelang/glojure/value.NewMapValSeq", github_com_glojurelang_glojure_value.NewMapValSeq)
	_register("github.com/glojurelang/glojure/value.NewMultiFn", github_com_glojurelang_glojure_value.NewMultiFn)
	_register("github.com/glojurelang/glojure/value.NewNamespace", github_com_glojurelang_glojure_value.NewNamespace)
	_register("github.com/glojurelang/glojure/value.NewPersistentHashMap", github_com_glojurelang_glojure_value.NewPersistentHashMap)
	_register("github.com/glojurelang/glojure/value.NewRangeIterator", github_com_glojurelang_glojure_value.NewRangeIterator)
	_register("github.com/glojurelang/glojure/value.NewRatio", github_com_glojurelang_glojure_value.NewRatio)
	_register("github.com/glojurelang/glojure/value.NewRatioBigInt", github_com_glojurelang_glojure_value.NewRatioBigInt)
	_register("github.com/glojurelang/glojure/value.NewRecurTarget", github_com_glojurelang_glojure_value.NewRecurTarget)
	_register("github.com/glojurelang/glojure/value.NewReduced", github_com_glojurelang_glojure_value.NewReduced)
	_register("github.com/glojurelang/glojure/value.NewRef", github_com_glojurelang_glojure_value.NewRef)
	_register("github.com/glojurelang/glojure/value.NewRepeat", github_com_glojurelang_glojure_value.NewRepeat)
	_register("github.com/glojurelang/glojure/value.NewRepeatN", github_com_glojurelang_glojure_value.NewRepeatN)
	_register("github.com/glojurelang/glojure/value.NewSet", github_com_glojurelang_glojure_value.NewSet)
	_register("github.com/glojurelang/glojure/value.NewSliceIterator", github_com_glojurelang_glojure_value.NewSliceIterator)
	_register("github.com/glojurelang/glojure/value.NewSubVector", github_com_glojurelang_glojure_value.NewSubVector)
	_register("github.com/glojurelang/glojure/value.NewSymbol", github_com_glojurelang_glojure_value.NewSymbol)
	_register("github.com/glojurelang/glojure/value.NewVar", github_com_glojurelang_glojure_value.NewVar)
	_register("github.com/glojurelang/glojure/value.NewVarWithRoot", github_com_glojurelang_glojure_value.NewVarWithRoot)
	_register("github.com/glojurelang/glojure/value.NewVector", github_com_glojurelang_glojure_value.NewVector)
	_register("github.com/glojurelang/glojure/value.NewVectorFromCollection", github_com_glojurelang_glojure_value.NewVectorFromCollection)
	_register("github.com/glojurelang/glojure/value.NewVectorIterator", github_com_glojurelang_glojure_value.NewVectorIterator)
	_register("github.com/glojurelang/glojure/value.NewVolatile", github_com_glojurelang_glojure_value.NewVolatile)
	_register("github.com/glojurelang/glojure/value.Next", github_com_glojurelang_glojure_value.Next)
	_register("github.com/glojurelang/glojure/value.Node", reflect.TypeOf((*github_com_glojurelang_glojure_value.Node)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.NodeIterator", reflect.TypeOf((*github_com_glojurelang_glojure_value.NodeIterator)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.NodeSeq", reflect.TypeOf((*github_com_glojurelang_glojure_value.NodeSeq)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Nth", github_com_glojurelang_glojure_value.Nth)
	_register("github.com/glojurelang/glojure/value.Nther", reflect.TypeOf((*github_com_glojurelang_glojure_value.Nther)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.NumberMethods", reflect.TypeOf((*github_com_glojurelang_glojure_value.NumberMethods)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Numbers", github_com_glojurelang_glojure_value.Numbers)
	_register("github.com/glojurelang/glojure/value.NumbersEqual", github_com_glojurelang_glojure_value.NumbersEqual)
	_register("github.com/glojurelang/glojure/value.Object", reflect.TypeOf((*github_com_glojurelang_glojure_value.Object)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Ops", github_com_glojurelang_glojure_value.Ops)
	_register("github.com/glojurelang/glojure/value.Pair", reflect.TypeOf((*github_com_glojurelang_glojure_value.Pair)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Peek", github_com_glojurelang_glojure_value.Peek)
	_register("github.com/glojurelang/glojure/value.PersistentHashMap", reflect.TypeOf((*github_com_glojurelang_glojure_value.PersistentHashMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.PersistentStructMap", reflect.TypeOf((*github_com_glojurelang_glojure_value.PersistentStructMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.PersistentStructMapDef", reflect.TypeOf((*github_com_glojurelang_glojure_value.PersistentStructMapDef)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Pop", github_com_glojurelang_glojure_value.Pop)
	_register("github.com/glojurelang/glojure/value.PopThreadBindings", github_com_glojurelang_glojure_value.PopThreadBindings)
	_register("github.com/glojurelang/glojure/value.Print", github_com_glojurelang_glojure_value.Print)
	_register("github.com/glojurelang/glojure/value.PrintString", github_com_glojurelang_glojure_value.PrintString)
	_register("github.com/glojurelang/glojure/value.PushThreadBindings", github_com_glojurelang_glojure_value.PushThreadBindings)
	_register("github.com/glojurelang/glojure/value.Ratio", reflect.TypeOf((*github_com_glojurelang_glojure_value.Ratio)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.RecurError", reflect.TypeOf((*github_com_glojurelang_glojure_value.RecurError)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.RecurTarget", reflect.TypeOf((*github_com_glojurelang_glojure_value.RecurTarget)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Reduce", github_com_glojurelang_glojure_value.Reduce)
	_register("github.com/glojurelang/glojure/value.ReduceInit", github_com_glojurelang_glojure_value.ReduceInit)
	_register("github.com/glojurelang/glojure/value.ReduceKV", github_com_glojurelang_glojure_value.ReduceKV)
	_register("github.com/glojurelang/glojure/value.Reduced", reflect.TypeOf((*github_com_glojurelang_glojure_value.Reduced)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Ref", reflect.TypeOf((*github_com_glojurelang_glojure_value.Ref)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Repeat", reflect.TypeOf((*github_com_glojurelang_glojure_value.Repeat)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Rest", github_com_glojurelang_glojure_value.Rest)
	_register("github.com/glojurelang/glojure/value.Reversible", reflect.TypeOf((*github_com_glojurelang_glojure_value.Reversible)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.RuneFromCharLiteral", github_com_glojurelang_glojure_value.RuneFromCharLiteral)
	_register("github.com/glojurelang/glojure/value.SafeMerge", github_com_glojurelang_glojure_value.SafeMerge)
	_register("github.com/glojurelang/glojure/value.Seq", github_com_glojurelang_glojure_value.Seq)
	_register("github.com/glojurelang/glojure/value.SeqsEqual", github_com_glojurelang_glojure_value.SeqsEqual)
	_register("github.com/glojurelang/glojure/value.Sequential", reflect.TypeOf((*github_com_glojurelang_glojure_value.Sequential)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Set", reflect.TypeOf((*github_com_glojurelang_glojure_value.Set)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.SetField", github_com_glojurelang_glojure_value.SetField)
	_register("github.com/glojurelang/glojure/value.StackFrame", reflect.TypeOf((*github_com_glojurelang_glojure_value.StackFrame)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Stacker", reflect.TypeOf((*github_com_glojurelang_glojure_value.Stacker)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Sub", github_com_glojurelang_glojure_value.Sub)
	_register("github.com/glojurelang/glojure/value.SubP", github_com_glojurelang_glojure_value.SubP)
	_register("github.com/glojurelang/glojure/value.SubVector", reflect.TypeOf((*github_com_glojurelang_glojure_value.SubVector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Subvec", github_com_glojurelang_glojure_value.Subvec)
	_register("github.com/glojurelang/glojure/value.Symbol", reflect.TypeOf((*github_com_glojurelang_glojure_value.Symbol)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.SymbolCoreNamespace", github_com_glojurelang_glojure_value.SymbolCoreNamespace)
	_register("github.com/glojurelang/glojure/value.ToString", github_com_glojurelang_glojure_value.ToString)
	_register("github.com/glojurelang/glojure/value.TransientMap", reflect.TypeOf((*github_com_glojurelang_glojure_value.TransientMap)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.TransientSet", reflect.TypeOf((*github_com_glojurelang_glojure_value.TransientSet)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.UnboundVar", reflect.TypeOf((*github_com_glojurelang_glojure_value.UnboundVar)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Vals", github_com_glojurelang_glojure_value.Vals)
	_register("github.com/glojurelang/glojure/value.Var", reflect.TypeOf((*github_com_glojurelang_glojure_value.Var)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.VarAgent", github_com_glojurelang_glojure_value.VarAgent)
	_register("github.com/glojurelang/glojure/value.VarAssert", github_com_glojurelang_glojure_value.VarAssert)
	_register("github.com/glojurelang/glojure/value.VarCompileFiles", github_com_glojurelang_glojure_value.VarCompileFiles)
	_register("github.com/glojurelang/glojure/value.VarCurrentNS", github_com_glojurelang_glojure_value.VarCurrentNS)
	_register("github.com/glojurelang/glojure/value.VarDataReaders", github_com_glojurelang_glojure_value.VarDataReaders)
	_register("github.com/glojurelang/glojure/value.VarFile", github_com_glojurelang_glojure_value.VarFile)
	_register("github.com/glojurelang/glojure/value.VarIn", github_com_glojurelang_glojure_value.VarIn)
	_register("github.com/glojurelang/glojure/value.VarInNS", github_com_glojurelang_glojure_value.VarInNS)
	_register("github.com/glojurelang/glojure/value.VarNS", github_com_glojurelang_glojure_value.VarNS)
	_register("github.com/glojurelang/glojure/value.VarOut", github_com_glojurelang_glojure_value.VarOut)
	_register("github.com/glojurelang/glojure/value.VarParents", github_com_glojurelang_glojure_value.VarParents)
	_register("github.com/glojurelang/glojure/value.VarPrOn", github_com_glojurelang_glojure_value.VarPrOn)
	_register("github.com/glojurelang/glojure/value.VarPrintInitialized", github_com_glojurelang_glojure_value.VarPrintInitialized)
	_register("github.com/glojurelang/glojure/value.VarPrintReadably", github_com_glojurelang_glojure_value.VarPrintReadably)
	_register("github.com/glojurelang/glojure/value.VarUncheckedMath", github_com_glojurelang_glojure_value.VarUncheckedMath)
	_register("github.com/glojurelang/glojure/value.VarWarnOnReflection", github_com_glojurelang_glojure_value.VarWarnOnReflection)
	_register("github.com/glojurelang/glojure/value.Vector", reflect.TypeOf((*github_com_glojurelang_glojure_value.Vector)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.Volatile", reflect.TypeOf((*github_com_glojurelang_glojure_value.Volatile)(nil)).Elem())
	_register("github.com/glojurelang/glojure/value.WithMeta", github_com_glojurelang_glojure_value.WithMeta)

	// package github.com/glojurelang/glojure/runtime
	////////////////////////////////////////
	_register("github.com/glojurelang/glojure/runtime.AddLoadPath", github_com_glojurelang_glojure_runtime.AddLoadPath)
	_register("github.com/glojurelang/glojure/runtime.Debug", github_com_glojurelang_glojure_runtime.Debug)
	_register("github.com/glojurelang/glojure/runtime.EvalError", reflect.TypeOf((*github_com_glojurelang_glojure_runtime.EvalError)(nil)).Elem())
	_register("github.com/glojurelang/glojure/runtime.EvalOption", reflect.TypeOf((*github_com_glojurelang_glojure_runtime.EvalOption)(nil)).Elem())
	_register("github.com/glojurelang/glojure/runtime.NewEnvironment", github_com_glojurelang_glojure_runtime.NewEnvironment)
	_register("github.com/glojurelang/glojure/runtime.Program", reflect.TypeOf((*github_com_glojurelang_glojure_runtime.Program)(nil)).Elem())
	_register("github.com/glojurelang/glojure/runtime.RT", github_com_glojurelang_glojure_runtime.RT)
	_register("github.com/glojurelang/glojure/runtime.RTMethods", reflect.TypeOf((*github_com_glojurelang_glojure_runtime.RTMethods)(nil)).Elem())
	_register("github.com/glojurelang/glojure/runtime.RTReadString", github_com_glojurelang_glojure_runtime.RTReadString)
	_register("github.com/glojurelang/glojure/runtime.ReadEval", github_com_glojurelang_glojure_runtime.ReadEval)
	_register("github.com/glojurelang/glojure/runtime.ReadEvalOption", reflect.TypeOf((*github_com_glojurelang_glojure_runtime.ReadEvalOption)(nil)).Elem())
	_register("github.com/glojurelang/glojure/runtime.SymInNS", github_com_glojurelang_glojure_runtime.SymInNS)
	_register("github.com/glojurelang/glojure/runtime.SymNS", github_com_glojurelang_glojure_runtime.SymNS)
	_register("github.com/glojurelang/glojure/runtime.SymbolDot", github_com_glojurelang_glojure_runtime.SymbolDot)
	_register("github.com/glojurelang/glojure/runtime.SymbolInNamespace", github_com_glojurelang_glojure_runtime.SymbolInNamespace)
	_register("github.com/glojurelang/glojure/runtime.SymbolNamespace", github_com_glojurelang_glojure_runtime.SymbolNamespace)
	_register("github.com/glojurelang/glojure/runtime.SymbolSpliceUnquote", github_com_glojurelang_glojure_runtime.SymbolSpliceUnquote)
	_register("github.com/glojurelang/glojure/runtime.SymbolUnquote", github_com_glojurelang_glojure_runtime.SymbolUnquote)
	_register("github.com/glojurelang/glojure/runtime.SymbolUserNamespace", github_com_glojurelang_glojure_runtime.SymbolUserNamespace)
	_register("github.com/glojurelang/glojure/runtime.WithEnv", github_com_glojurelang_glojure_runtime.WithEnv)
	_register("github.com/glojurelang/glojure/runtime.WithFilename", github_com_glojurelang_glojure_runtime.WithFilename)
	_register("github.com/glojurelang/glojure/runtime.WithLoadPath", github_com_glojurelang_glojure_runtime.WithLoadPath)
	_register("github.com/glojurelang/glojure/runtime.WithStderr", github_com_glojurelang_glojure_runtime.WithStderr)
	_register("github.com/glojurelang/glojure/runtime.WithStdout", github_com_glojurelang_glojure_runtime.WithStdout)
}
